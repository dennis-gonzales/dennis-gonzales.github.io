"use strict";(self.webpackChunkmy_learning_paths=self.webpackChunkmy_learning_paths||[]).push([[2195],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>h});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=a.createContext({}),l=function(e){var t=a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=l(r),u=n,h=m["".concat(c,".").concat(u)]||m[u]||d[u]||o;return r?a.createElement(h,i(i({ref:t},p),{},{components:r})):a.createElement(h,i({ref:t},p))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[m]="string"==typeof e?e:n,i[1]=s;for(var l=2;l<o;l++)i[l]=r[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}u.displayName="MDXCreateElement"},3962:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var a=r(7462),n=(r(7294),r(3905));const o={},i="Object-Oriented (OOP)",s={unversionedId:"programming/paradigm/object-oriented",id:"programming/paradigm/object-oriented",title:"Object-Oriented (OOP)",description:'Object-Oriented Programming is a programming paradigm or style that is based on the concept of "objects". Objects are instances of classes, which are essentially user-defined data types.',source:"@site/docs/programming/paradigm/object-oriented.md",sourceDirName:"programming/paradigm",slug:"/programming/paradigm/object-oriented",permalink:"/programming/paradigm/object-oriented",draft:!1,editUrl:"https://github.com/dennis-gonzales/dennis-gonzales.github.io/blob/main/docs/programming/paradigm/object-oriented.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Functional (FP)",permalink:"/programming/paradigm/functional"},next:{title:"Procedural (PP)",permalink:"/programming/paradigm/procedural"}},c={},l=[{value:"Object Definition",id:"object-definition",level:2},{value:"Key Concepts",id:"key-concepts",level:3},{value:"Major Principles",id:"major-principles",level:3}],p={toc:l},m="wrapper";function d(e){let{components:t,...r}=e;return(0,n.kt)(m,(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"object-oriented-oop"},"Object-Oriented (OOP)"),(0,n.kt)("p",null,"Object-Oriented Programming is a programming paradigm or style that is based on the concept of ",(0,n.kt)("strong",{parentName:"p"},'"objects"'),". Objects are instances of classes, which are essentially user-defined data types."),(0,n.kt)("h2",{id:"object-definition"},"Object Definition"),(0,n.kt)("p",null,"An object can be thought of as a 'thing' that can perform a set of related activities. The real-world entities such as a car, a pen, a circle, a button, even a student, all could be considered as objects. They all have a state and behavior."),(0,n.kt)("h3",{id:"key-concepts"},"Key Concepts"),(0,n.kt)("p",null," Objects are the core of OOP, and they contain:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Data (attributes or properties):")," These are the characteristics or state of the object. For example, a 'Car' object might have attributes like color, make, model, and speed.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Methods (behaviors):")," These are the things that the object can do, or the actions it can take. For example, our 'Car' object might have methods like accelerate, brake, and turn."))),(0,n.kt)("h3",{id:"major-principles"},"Major Principles"),(0,n.kt)("p",null,"OOP is built around four major principles:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Encapsulation:")," The implementation and state of each object are privately held inside a defined boundary, or class. Other objects do not have access to this class or the authority to make changes but are only able to call a list of public functions, or methods.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Inheritance:")," This is a way to form new classes using classes that have already been defined. It's a way to express a relationship between classes, like a 'Car' is a type of 'Vehicle'.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Polymorphism:")," This means that one interface can be used for a general class of actions. The specific action is determined by the exact nature of the situation. For example, the 'Car' class could have a method called 'start_engine'. The implementation of start_engine could be different for different types of cars.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Abstraction:")," It simplifies complex systems by modeling classes appropriate to the problem, and working at the most appropriate level of inheritance for a given aspect of the problem."))),(0,n.kt)("p",null,"OOP helps in providing a clear structure for the programs. It makes the code easier to maintain, modify and debug and provides a good framework for code libraries where the supplied software components can be easily adapted and modified by the programmer."))}d.isMDXComponent=!0}}]);