"use strict";(self.webpackChunkmy_learning_paths=self.webpackChunkmy_learning_paths||[]).push([[3117],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),p=u(n),g=a,d=p["".concat(s,".").concat(g)]||p[g]||c[g]||i;return n?r.createElement(d,o(o({ref:t},m),{},{components:n})):r.createElement(d,o({ref:t},m))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:a,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},5056:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const i={},o="Numbers",l={unversionedId:"programming/languages/kotlin/data-types/numbers",id:"programming/languages/kotlin/data-types/numbers",title:"Numbers",description:"Numbers are one of the fundamental types in Kotlin, as in many other programming languages. Kotlin handles numbers in a way that is consistent with Java, but adds some additional features to improve safety and expressiveness.",source:"@site/docs/programming/languages/kotlin/data-types/numbers.md",sourceDirName:"programming/languages/kotlin/data-types",slug:"/programming/languages/kotlin/data-types/numbers",permalink:"/programming/languages/kotlin/data-types/numbers",draft:!1,editUrl:"https://github.com/dennis-gonzales/dennis-gonzales.github.io/blob/main/docs/programming/languages/kotlin/data-types/numbers.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Sets",permalink:"/programming/languages/kotlin/data-types/collections/sets"},next:{title:"Strings",permalink:"/programming/languages/kotlin/data-types/strings"}},s={},u=[{value:"Defining Numbers",id:"defining-numbers",level:2},{value:"Number Conversions",id:"number-conversions",level:2},{value:"Numeric Operations",id:"numeric-operations",level:2},{value:"Common Pitfalls and Best Practices",id:"common-pitfalls-and-best-practices",level:2},{value:"Division of Integers",id:"division-of-integers",level:3},{value:"Checking for Overflow",id:"checking-for-overflow",level:3},{value:"Null Safety with Numbers",id:"null-safety-with-numbers",level:3},{value:"Design Patterns",id:"design-patterns",level:2}],m={toc:u},p="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"numbers"},"Numbers"),(0,a.kt)("p",null,"Numbers are one of the fundamental types in Kotlin, as in many other programming languages. Kotlin handles numbers in a way that is consistent with Java, but adds some additional features to improve safety and expressiveness."),(0,a.kt)("h2",{id:"defining-numbers"},"Defining Numbers"),(0,a.kt)("p",null,"Kotlin provides several built-in types of numbers, which cover both integers and floating-point numbers."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="DefineNumbers.kt"',title:'"DefineNumbers.kt"'},"val byte: Byte = 1\nval short: Short = 1\nval int: Int = 1\nval long: Long = 1L\nval float: Float = 1.0f\nval double: Double = 1.0\n")),(0,a.kt)("h2",{id:"number-conversions"},"Number Conversions"),(0,a.kt)("p",null,"In Kotlin, smaller types are not implicitly converted to bigger types. This means that we can't assign a value of type Byte to an Int variable without an explicit conversion."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="NumberConversions.kt"',title:'"NumberConversions.kt"'},"val byte: Byte = 1\nval int: Int = byte.toInt() // explicit conversion\n")),(0,a.kt)("h2",{id:"numeric-operations"},"Numeric Operations"),(0,a.kt)("p",null,"Kotlin provides a set of standard arithmetic operations (plus, minus, times, div, mod) that can be used with number types."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="NumericOperations.kt"',title:'"NumericOperations.kt"'},"val a = 5\nval b = 2\nprintln(a + b)  // Prints: 7\nprintln(a - b)  // Prints: 3\nprintln(a * b)  // Prints: 10\nprintln(a / b)  // Prints: 2\nprintln(a % b)  // Prints: 1\n")),(0,a.kt)("h2",{id:"common-pitfalls-and-best-practices"},"Common Pitfalls and Best Practices"),(0,a.kt)("h3",{id:"division-of-integers"},"Division of Integers"),(0,a.kt)("p",null,"In Kotlin, as in Java, the division of integers uses integer division. If you want to get a floating point result, you should convert at least one argument to a floating point number type."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="IntegerDivision.kt"',title:'"IntegerDivision.kt"'},"val a = 5\nval b = 2\nprintln(a / b)  // Prints: 2 (integer division)\nprintln(a / b.toDouble())  // Prints: 2.5 (floating point division)\n")),(0,a.kt)("h3",{id:"checking-for-overflow"},"Checking for Overflow"),(0,a.kt)("p",null,"Kotlin does not have built-in overflow checking for arithmetic operations. If you're performing an operation that may overflow, you need to check for this manually."),(0,a.kt)("h3",{id:"null-safety-with-numbers"},"Null Safety with Numbers"),(0,a.kt)("p",null,"Kotlin's null safety features also apply to numbers. If a number can be null, you need to declare it as nullable."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="NullableNumber.kt"',title:'"NullableNumber.kt"'},"val num: Int? = null\n")),(0,a.kt)("h2",{id:"design-patterns"},"Design Patterns"),(0,a.kt)("p",null,"In the context of design patterns, numbers are used in various ways:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"In the Factory pattern, a number might be a parameter that controls how an object is created."),(0,a.kt)("li",{parentName:"ul"},"In the Strategy pattern, a number might be a parameter that changes the behavior of a strategy.")),(0,a.kt)("p",null,"Numbers are a fundamental part of any programming language, and understanding how to use them effectively is an essential skill in Kotlin programming."))}c.isMDXComponent=!0}}]);