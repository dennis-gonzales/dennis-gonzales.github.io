"use strict";(self.webpackChunkmy_learning_paths=self.webpackChunkmy_learning_paths||[]).push([[9815],{3905:(t,e,n)=>{n.d(e,{Zo:()=>u,kt:()=>d});var r=n(7294);function i(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function s(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?a(Object(n),!0).forEach((function(e){i(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,r,i=function(t,e){if(null==t)return{};var n,r,i={},a=Object.keys(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}var o=r.createContext({}),g=function(t){var e=r.useContext(o),n=e;return t&&(n="function"==typeof t?t(e):s(s({},e),t)),n},u=function(t){var e=g(t.components);return r.createElement(o.Provider,{value:e},t.children)},p="mdxType",c={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(t,e){var n=t.components,i=t.mdxType,a=t.originalType,o=t.parentName,u=l(t,["components","mdxType","originalType","parentName"]),p=g(n),m=i,d=p["".concat(o,".").concat(m)]||p[m]||c[m]||a;return n?r.createElement(d,s(s({ref:e},u),{},{components:n})):r.createElement(d,s({ref:e},u))}));function d(t,e){var n=arguments,i=e&&e.mdxType;if("string"==typeof t||i){var a=n.length,s=new Array(a);s[0]=m;var l={};for(var o in e)hasOwnProperty.call(e,o)&&(l[o]=e[o]);l.originalType=t,l[p]="string"==typeof t?t:i,s[1]=l;for(var g=2;g<a;g++)s[g]=n[g];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3640:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>o,contentTitle:()=>s,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>g});var r=n(7462),i=(n(7294),n(3905));const a={},s="Strings",l={unversionedId:"programming/languages/kotlin/data-types/strings",id:"programming/languages/kotlin/data-types/strings",title:"Strings",description:"A String in Kotlin is an immutable sequence of characters (Char). Once a string is created, it cannot be changed. This immutability is useful for multi-threaded programming as it allows safe sharing of strings between threads without synchronization.",source:"@site/docs/programming/languages/kotlin/data-types/strings.md",sourceDirName:"programming/languages/kotlin/data-types",slug:"/programming/languages/kotlin/data-types/strings",permalink:"/programming/languages/kotlin/data-types/strings",draft:!1,editUrl:"https://github.com/dennis-gonzales/dennis-gonzales.github.io/blob/main/docs/programming/languages/kotlin/data-types/strings.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Numbers",permalink:"/programming/languages/kotlin/data-types/numbers"},next:{title:"Functions",permalink:"/programming/languages/kotlin/functions/"}},o={},g=[{value:"Defining a String",id:"defining-a-string",level:2},{value:"String Interpolation",id:"string-interpolation",level:2},{value:"String Functions",id:"string-functions",level:2},{value:"Common Pitfalls and Best Practices",id:"common-pitfalls-and-best-practices",level:2},{value:"Null Safety with Strings",id:"null-safety-with-strings",level:3},{value:"Raw Strings",id:"raw-strings",level:3},{value:"Immutability of Strings",id:"immutability-of-strings",level:3},{value:"Design Patterns",id:"design-patterns",level:2}],u={toc:g},p="wrapper";function c(t){let{components:e,...n}=t;return(0,i.kt)(p,(0,r.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"strings"},"Strings"),(0,i.kt)("p",null,"A String in Kotlin is an immutable sequence of characters (Char). Once a string is created, it cannot be changed. This immutability is useful for multi-threaded programming as it allows safe sharing of strings between threads without synchronization."),(0,i.kt)("h2",{id:"defining-a-string"},"Defining a String"),(0,i.kt)("p",null,"Strings are defined using string literals. Kotlin provides two types of string literals: escaped strings that may have escaped characters in them, and raw strings that can contain newlines and arbitrary text."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="DefineString.kt"',title:'"DefineString.kt"'},'val str1 = "Hello, World!" // Escaped String\nval str2 = """\n    Hello,\n    World!\n""" // Raw String\n')),(0,i.kt)("h2",{id:"string-interpolation"},"String Interpolation"),(0,i.kt)("p",null,"Kotlin supports string interpolation, which allows you to include variable references and expressions inside a string."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="StringInterpolation.kt"',title:'"StringInterpolation.kt"'},'val name = "World"\nprintln("Hello, $name!") // Prints: Hello, World!\n')),(0,i.kt)("h2",{id:"string-functions"},"String Functions"),(0,i.kt)("p",null,"Kotlin provides a rich set of functions to work with strings."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="StringFunctions.kt"',title:'"StringFunctions.kt"'},'val str = "Hello, World!"\nprintln(str.length) // Prints: 13\nprintln(str.toUpperCase()) // Prints: HELLO, WORLD!\nprintln(str.substring(0, 5)) // Prints: Hello\n')),(0,i.kt)("h2",{id:"common-pitfalls-and-best-practices"},"Common Pitfalls and Best Practices"),(0,i.kt)("h3",{id:"null-safety-with-strings"},"Null Safety with Strings"),(0,i.kt)("p",null,"Kotlin's null safety features also apply to strings. If a string can be null, you need to declare it as nullable."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="NullableString.kt"',title:'"NullableString.kt"'},"val str: String? = null\n")),(0,i.kt)("h3",{id:"raw-strings"},"Raw Strings"),(0,i.kt)("p",null,"Raw strings are useful for multi-line strings and can contain newlines and arbitrary text. However, leading indentation can be included in the string, so be aware of this when formatting your code."),(0,i.kt)("h3",{id:"immutability-of-strings"},"Immutability of Strings"),(0,i.kt)("p",null,"Since strings in Kotlin are immutable, concatenating strings using the '+' operator creates a new string and can be inefficient if done repeatedly in a loop. If you need to concatenate strings in a loop, consider using a ",(0,i.kt)("inlineCode",{parentName:"p"},"StringBuilder"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Related Links:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"../variables/deep-dive#immutable-primitive-types"},"Immutable Primitive Types"))),(0,i.kt)("h2",{id:"design-patterns"},"Design Patterns"),(0,i.kt)("p",null,"In the context of design patterns, strings are used in various ways:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"In the Prototype pattern, a string might be part of the state that gets copied to new objects."),(0,i.kt)("li",{parentName:"ul"},"In the Flyweight pattern, strings might be shared between different contexts.")),(0,i.kt)("p",null,"Understanding strings is fundamental to Kotlin programming as they are used in almost every program. Kotlin's string class provides a rich set of functions to handle common string operations."))}c.isMDXComponent=!0}}]);