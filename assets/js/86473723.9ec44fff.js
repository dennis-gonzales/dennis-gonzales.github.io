"use strict";(self.webpackChunkmy_learning_paths=self.webpackChunkmy_learning_paths||[]).push([[2509],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},l=Object.keys(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=i.createContext({}),u=function(e){var t=i.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=u(e.components);return i.createElement(o.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),m=u(n),d=a,g=m["".concat(o,".").concat(d)]||m[d]||p[d]||l;return n?i.createElement(g,s(s({ref:t},c),{},{components:n})):i.createElement(g,s({ref:t},c))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,s=new Array(l);s[0]=d;var r={};for(var o in t)hasOwnProperty.call(t,o)&&(r[o]=t[o]);r.originalType=e,r[m]="string"==typeof e?e:a,s[1]=r;for(var u=2;u<l;u++)s[u]=n[u];return i.createElement.apply(null,s)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3062:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>p,frontMatter:()=>l,metadata:()=>r,toc:()=>u});var i=n(7462),a=(n(7294),n(3905));const l={},s="Lists",r={unversionedId:"programming/languages/kotlin/data-types/collections/lists",id:"programming/languages/kotlin/data-types/collections/lists",title:"Lists",description:"A List in Kotlin is an ordered collection of items. Lists can contain duplicate elements. Kotlin provides methods to manipulate lists and their elements.",source:"@site/docs/programming/languages/kotlin/data-types/collections/lists.md",sourceDirName:"programming/languages/kotlin/data-types/collections",slug:"/programming/languages/kotlin/data-types/collections/lists",permalink:"/programming/languages/kotlin/data-types/collections/lists",draft:!1,editUrl:"https://github.com/dennis-gonzales/dennis-gonzales.github.io/blob/main/docs/programming/languages/kotlin/data-types/collections/lists.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Diving Deep",permalink:"/programming/languages/kotlin/data-types/collections/diving-deep"},next:{title:"Maps",permalink:"/programming/languages/kotlin/data-types/collections/maps"}},o={},u=[{value:"Defining a List",id:"defining-a-list",level:2},{value:"Accessing Elements",id:"accessing-elements",level:2},{value:"Modifying a MutableList",id:"modifying-a-mutablelist",level:2},{value:"Common Pitfalls and Best Practices",id:"common-pitfalls-and-best-practices",level:2},{value:"Null Safety",id:"null-safety",level:2},{value:"Avoid Mutating Lists",id:"avoid-mutating-lists",level:3},{value:"List vs MutableList",id:"list-vs-mutablelist",level:3},{value:"Design Patterns",id:"design-patterns",level:2}],c={toc:u},m="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"lists"},"Lists"),(0,a.kt)("p",null,"A List in Kotlin is an ordered collection of items. Lists can contain duplicate elements. Kotlin provides methods to manipulate lists and their elements."),(0,a.kt)("h2",{id:"defining-a-list"},"Defining a List"),(0,a.kt)("p",null,"A list is defined using the ",(0,a.kt)("inlineCode",{parentName:"p"},"listOf")," function for an immutable list or the ",(0,a.kt)("inlineCode",{parentName:"p"},"mutableListOf")," function for a mutable list."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="DefineList.kt"',title:'"DefineList.kt"'},"val immutableList = listOf(1, 2, 3, 4, 5)\nval mutableList = mutableListOf(1, 2, 3, 4, 5)\n")),(0,a.kt)("h2",{id:"accessing-elements"},"Accessing Elements"),(0,a.kt)("p",null,"You can access an element of a list using its index. The indices start from zero."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="AccessElements.kt"',title:'"AccessElements.kt"'},"val numbers = listOf(1, 2, 3, 4, 5)\nprintln(numbers[1]) // Prints: 2\n")),(0,a.kt)("h2",{id:"modifying-a-mutablelist"},"Modifying a MutableList"),(0,a.kt)("p",null,"You can add, remove, or update elements in a MutableList."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="ModifyMutableList.kt"',title:'"ModifyMutableList.kt"'},"val numbers = mutableListOf(1, 2, 3, 4, 5)\nnumbers[1] = 22\nnumbers.add(6)\nnumbers.removeAt(0)\nprintln(numbers) // Prints: [22, 3, 4, 5, 6]\n")),(0,a.kt)("h2",{id:"common-pitfalls-and-best-practices"},"Common Pitfalls and Best Practices"),(0,a.kt)("h2",{id:"null-safety"},"Null Safety"),(0,a.kt)("p",null,"Kotlin's null safety features also apply to lists. If a list can contain null elements, you need to declare the type as nullable."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="NullableList.kt"',title:'"NullableList.kt"'},"val numbers: List<Int?> = listOf(1, 2, null, 4, 5)\n")),(0,a.kt)("h3",{id:"avoid-mutating-lists"},"Avoid Mutating Lists"),(0,a.kt)("p",null,"It's a good practice to use immutable lists whenever possible. This makes your code safer because you can't accidentally modify the list."),(0,a.kt)("h3",{id:"list-vs-mutablelist"},"List vs MutableList"),(0,a.kt)("p",null,"A List is immutable. You can't add, remove, or change elements in it. A MutableList is mutable. You can add, remove, or change elements. Be sure to choose the right type of list based on your requirements."),(0,a.kt)("h2",{id:"design-patterns"},"Design Patterns"),(0,a.kt)("p",null,"In the context of design patterns, lists are used in many ways:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"In the Iterator pattern, a list is a common type of aggregate that you can iterate over."),(0,a.kt)("li",{parentName:"ul"},"In the Composite pattern, a composite object might store its children in a list."),(0,a.kt)("li",{parentName:"ul"},"In the Decorator pattern, a decorator might add elements to a list or alter their order.")),(0,a.kt)("p",null,"Lists are one of the fundamental data structures in programming and are used in a wide variety of applications. Understanding how to use lists effectively is an essential skill in Kotlin programming."))}p.isMDXComponent=!0}}]);