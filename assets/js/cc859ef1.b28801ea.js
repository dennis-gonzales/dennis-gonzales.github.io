"use strict";(self.webpackChunkmy_learning_paths=self.webpackChunkmy_learning_paths||[]).push([[9005],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var o=a.createContext({}),c=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(o.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=s,g=d["".concat(o,".").concat(m)]||d[m]||u[m]||r;return n?a.createElement(g,i(i({ref:t},p),{},{components:n})):a.createElement(g,i({ref:t},p))}));function g(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,i=new Array(r);i[0]=m;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[d]="string"==typeof e?e:s,i[1]=l;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2991:(e,t,n)=>{n.d(t,{Z:()=>k});var a=n(7294),s=n(6010),r=n(2802),i=n(9960),l=n(3919),o=n(5999);const c={cardContainer:"cardContainer_fWXF",cardTitle:"cardTitle_rnsV",cardDescription:"cardDescription_PWke"};function p(e){let{href:t,children:n}=e;return a.createElement(i.Z,{href:t,className:(0,s.Z)("card padding--lg",c.cardContainer)},n)}function d(e){let{href:t,icon:n,title:r,description:i}=e;return a.createElement(p,{href:t},a.createElement("h2",{className:(0,s.Z)("text--truncate",c.cardTitle),title:r},n," ",r),i&&a.createElement("p",{className:(0,s.Z)("text--truncate",c.cardDescription),title:i},i))}function u(e){let{item:t}=e;const n=(0,r.Wl)(t);return n?a.createElement(d,{href:n,icon:"\ud83d\uddc3\ufe0f",title:t.label,description:t.description??(0,o.I)({message:"{count} items",id:"theme.docs.DocCard.categoryDescription",description:"The default description for a category card in the generated index about how many items this category includes"},{count:t.items.length})}):null}function m(e){let{item:t}=e;const n=(0,l.Z)(t.href)?"\ud83d\udcc4\ufe0f":"\ud83d\udd17",s=(0,r.xz)(t.docId??void 0);return a.createElement(d,{href:t.href,icon:n,title:t.label,description:t.description??s?.description})}function g(e){let{item:t}=e;switch(t.type){case"link":return a.createElement(m,{item:t});case"category":return a.createElement(u,{item:t});default:throw new Error(`unknown item type ${JSON.stringify(t)}`)}}function h(e){let{className:t}=e;const n=(0,r.jA)();return a.createElement(k,{items:n.items,className:t})}function k(e){const{items:t,className:n}=e;if(!t)return a.createElement(h,e);const i=(0,r.MN)(t);return a.createElement("section",{className:(0,s.Z)("row",n)},i.map(((e,t)=>a.createElement("article",{key:t,className:"col col--6 margin-bottom--lg"},a.createElement(g,{item:e})))))}},9171:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=n(7462),s=(n(7294),n(3905)),r=n(2991);const i={sidebar_position:4},l="Classes",o={unversionedId:"programming/languages/kotlin/classes/index",id:"programming/languages/kotlin/classes/index",title:"Classes",description:"A class in Kotlin is declared using the class keyword. Classes in Kotlin are used to create objects (instances) which contain data and functions. The data defined in the class are properties and the functions are member functions.",source:"@site/docs/programming/languages/kotlin/classes/index.mdx",sourceDirName:"programming/languages/kotlin/classes",slug:"/programming/languages/kotlin/classes/",permalink:"/programming/languages/kotlin/classes/",draft:!1,editUrl:"https://github.com/dennis-gonzales/dennis-gonzales.github.io/blob/main/docs/programming/languages/kotlin/classes/index.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Deep Dive",permalink:"/programming/languages/kotlin/functions/deep-dive"},next:{title:"Companion Object",permalink:"/programming/languages/kotlin/classes/companion-object"}},c={},p=[{value:"Defining a Class",id:"defining-a-class",level:2},{value:"Class Properties",id:"class-properties",level:2},{value:"Class Functions",id:"class-functions",level:2},{value:"Constructors",id:"constructors",level:2},{value:"Inheritance",id:"inheritance",level:2},{value:"Any Class",id:"any-class",level:2},{value:"Common Pitfalls and Best Practices",id:"common-pitfalls-and-best-practices",level:2},{value:"Overriding Functions",id:"overriding-functions",level:3},{value:"Data Classes",id:"data-classes",level:3},{value:"Class vs Type",id:"class-vs-type",level:3},{value:"Design Patterns",id:"design-patterns",level:2}],d={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,s.kt)(u,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"classes"},"Classes"),(0,s.kt)("p",null,"A class in Kotlin is declared using the ",(0,s.kt)("inlineCode",{parentName:"p"},"class")," keyword. Classes in Kotlin are used to create objects (instances) which contain data and functions. The data defined in the class are properties and the functions are member functions."),(0,s.kt)("h2",{id:"defining-a-class"},"Defining a Class"),(0,s.kt)("p",null,"A class is defined with the ",(0,s.kt)("inlineCode",{parentName:"p"},"class")," keyword, followed by its name."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="ClassDefinition.kt"',title:'"ClassDefinition.kt"'},"class Person {\n    // Class body goes here\n}\n")),(0,s.kt)("h2",{id:"class-properties"},"Class Properties"),(0,s.kt)("p",null,"Classes can contain properties. A property is essentially a variable that belongs to the class."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="ClassProperties.kt"',title:'"ClassProperties.kt"'},'class Person {\n    var name: String = ""\n    var age: Int = 0\n}\n')),(0,s.kt)("h2",{id:"class-functions"},"Class Functions"),(0,s.kt)("p",null,"Classes can contain functions. These are called member functions."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="ClassFunctions.kt"',title:'"ClassFunctions.kt"'},'class Person {\n    var name: String = ""\n    var age: Int = 0\n\n    fun greet() {\n        println("Hello, my name is $name, and I am $age years old.")\n    }\n}\n')),(0,s.kt)("h2",{id:"constructors"},"Constructors"),(0,s.kt)("p",null,"Classes in Kotlin have a primary constructor and one or more secondary constructors. The primary constructor is part of the class header."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="ClassConstructor.kt"',title:'"ClassConstructor.kt"'},'class Person(val name: String, var age: Int) {\n    fun greet() {\n        println("Hello, my name is $name, and I am $age years old.")\n    }\n}\n')),(0,s.kt)("p",null,"In the above example, ",(0,s.kt)("inlineCode",{parentName:"p"},"Person")," has a primary constructor that takes a ",(0,s.kt)("inlineCode",{parentName:"p"},"String")," and an ",(0,s.kt)("inlineCode",{parentName:"p"},"Int")," as parameters. The ",(0,s.kt)("inlineCode",{parentName:"p"},"val")," keyword in the constructor means that the passed parameter will also be a property of the class."),(0,s.kt)("h2",{id:"inheritance"},"Inheritance"),(0,s.kt)("p",null,"In Kotlin, all classes inherit from the ",(0,s.kt)("inlineCode",{parentName:"p"},"Any")," class by default. However, a class can inherit from another class using the ",(0,s.kt)("inlineCode",{parentName:"p"},":")," symbol. To make a class inheritable, you need to mark it with the ",(0,s.kt)("inlineCode",{parentName:"p"},"open")," keyword."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="ClassInheritance.kt"',title:'"ClassInheritance.kt"'},'open class Animal {\n    fun eat() {\n        println("The animal is eating.")\n    }\n}\n\nclass Dog : Animal() {\n    fun bark() {\n        println("The dog is barking.")\n    }\n}\n')),(0,s.kt)("h2",{id:"any-class"},"Any Class"),(0,s.kt)("p",null,'in Kotlin, every class you create implicitly inherits from a class called "Any". This class, similar to "Object" in Java, is the root of the Kotlin class hierarchy. '),(0,s.kt)("p",null,'The "Any" class provides three methods: equals(), hashCode(), and toString(). Unless you define these methods yourself, every Kotlin class will have these three methods.'),(0,s.kt)("p",null,"Here's an example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="AnyClass.kt"',title:'"AnyClass.kt"'},"class MyKotlinClass {\n    // Your code here\n}\n\n// Even though it's not explicitly stated, MyKotlinClass inherits from Any\n")),(0,s.kt)("h2",{id:"common-pitfalls-and-best-practices"},"Common Pitfalls and Best Practices"),(0,s.kt)("h3",{id:"overriding-functions"},"Overriding Functions"),(0,s.kt)("p",null,"In Kotlin, you can override a function of a superclass in a subclass. To allow a function to be overridden, it must be marked with the ",(0,s.kt)("inlineCode",{parentName:"p"},"open")," keyword in the superclass, and it must be marked with the ",(0,s.kt)("inlineCode",{parentName:"p"},"override")," keyword in the subclass."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="FunctionOverriding.kt"',title:'"FunctionOverriding.kt"'},'open class Animal {\n    open fun sound() {\n        println("The animal makes a sound.")\n    }\n}\n\nclass Dog : Animal() {\n    override fun sound() {\n        println("The dog barks.")\n    }\n}\n')),(0,s.kt)("h3",{id:"data-classes"},"Data Classes"),(0,s.kt)("p",null,"When creating a class that only holds data, it's a good practice to declare the class as a ",(0,s.kt)("inlineCode",{parentName:"p"},"data class"),". This will automatically provide useful functions such as ",(0,s.kt)("inlineCode",{parentName:"p"},"toString()"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"equals()"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"hashCode()"),", and ",(0,s.kt)("inlineCode",{parentName:"p"},"copy()"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="DataClass.kt"',title:'"DataClass.kt"'},"data class Person(val name: String, var age: Int)\n")),(0,s.kt)("h3",{id:"class-vs-type"},"Class vs Type"),(0,s.kt)("p",null,"In Kotlin, a class is a blueprint or template for creating objects. A type is a classification of an object that determines how it can be used. Every class in Kotlin is also a type. However, Kotlin also has types that are not classes, such as nullable types, functional types, and type aliases."),(0,s.kt)("h2",{id:"design-patterns"},"Design Patterns"),(0,s.kt)("p",null,"In the context of design patterns, classes play a vital role in nearly every pattern. Here are a few examples:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"In the Factory pattern, classes are created through factory methods."),(0,s.kt)("li",{parentName:"ul"},"In the Observer pattern, classes observe and react to changes in other classes."),(0,s.kt)("li",{parentName:"ul"},"In the Strategy pattern, a class delegates some behavior to another class.")),(0,s.kt)("p",null,"Understanding classes is essential for object-oriented programming in Kotlin. They provide the structure for building complex, well-organized programs."),(0,s.kt)(r.Z,{mdxType:"DocCardList"}))}m.isMDXComponent=!0}}]);