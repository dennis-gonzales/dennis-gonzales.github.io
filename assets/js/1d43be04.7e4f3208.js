"use strict";(self.webpackChunkmy_learning_paths=self.webpackChunkmy_learning_paths||[]).push([[2131],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var u=a.createContext({}),o=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=o(e.components);return a.createElement(u.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,u=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=o(n),g=l,d=c["".concat(u,".").concat(g)]||c[g]||m[g]||r;return n?a.createElement(d,i(i({ref:t},p),{},{components:n})):a.createElement(d,i({ref:t},p))}));function d(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=g;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s[c]="string"==typeof e?e:l,i[1]=s;for(var o=2;o<r;o++)i[o]=n[o];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},275:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>o});var a=n(7462),l=(n(7294),n(3905));const r={},i="Tuple",s={unversionedId:"programming/languages/python/data-types/tuple",id:"programming/languages/python/data-types/tuple",title:"Tuple",description:"In Python, a tuple is an immutable sequence type. It is similar to a list in that it can contain elements of different types, but unlike lists, it cannot be changed once created (i.e., you cannot add, remove, or change elements).",source:"@site/docs/programming/languages/python/data-types/tuple.md",sourceDirName:"programming/languages/python/data-types",slug:"/programming/languages/python/data-types/tuple",permalink:"/programming/languages/python/data-types/tuple",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/programming/languages/python/data-types/tuple.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"List",permalink:"/programming/languages/python/data-types/list"},next:{title:"C",permalink:"/programming/languages/c"}},u={},o=[{value:"Common Pitfalls",id:"common-pitfalls",level:2},{value:"Immutable But Contain Mutable Elements",id:"immutable-but-contain-mutable-elements",level:3},{value:"Single Element Tuples",id:"single-element-tuples",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Use When Data Shouldn&#39;t Change",id:"use-when-data-shouldnt-change",level:3},{value:"Unpacking",id:"unpacking",level:3},{value:"Return Multiple Values from a Function",id:"return-multiple-values-from-a-function",level:3}],p={toc:o},c="wrapper";function m(e){let{components:t,...n}=e;return(0,l.kt)(c,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"tuple"},"Tuple"),(0,l.kt)("p",null,"In Python, a tuple is an immutable sequence type. It is similar to a ",(0,l.kt)("a",{parentName:"p",href:"./list"},"list")," in that it can contain elements of different types, but unlike lists, it cannot be changed once created (i.e., you cannot add, remove, or change elements)."),(0,l.kt)("p",null,"Here's an example of a tuple:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="main.py"',title:'"main.py"'},'my_tuple = (1, "Hello", 3.14)\n')),(0,l.kt)("p",null,"You can access elements of a tuple by their index:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="main.py"',title:'"main.py"'},'print(my_tuple[1])  # Outputs "Hello"\n')),(0,l.kt)("h2",{id:"common-pitfalls"},"Common Pitfalls"),(0,l.kt)("h3",{id:"immutable-but-contain-mutable-elements"},"Immutable But Contain Mutable Elements"),(0,l.kt)("p",null,"A common misunderstanding is to think that because tuples are immutable, their elements are too. This is not true. If a tuple contains a mutable type, like a list, that element can be changed."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="main.py"',title:'"main.py"'},"t = (1, [2, 3], 4)\nt[1].append(5)\nprint(t)  # Outputs (1, [2, 3, 5], 4)\n")),(0,l.kt)("h3",{id:"single-element-tuples"},"Single Element Tuples"),(0,l.kt)("p",null,"If you want to create a tuple with a single element, you need to include a trailing comma, otherwise Python interprets it as a simple parenthesized expression."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="main.py"',title:'"main.py"'},"not_a_tuple = (50)\nprint(type(not_a_tuple))  # Outputs <class 'int'>\n\na_tuple = (50,)\nprint(type(a_tuple))  # Outputs <class 'tuple'>\n")),(0,l.kt)("h2",{id:"best-practices"},"Best Practices"),(0,l.kt)("h3",{id:"use-when-data-shouldnt-change"},"Use When Data Shouldn't Change"),(0,l.kt)("p",null,"Because tuples are immutable, they're useful for storing a sequence of elements that shouldn't change throughout the course of your program."),(0,l.kt)("p",null,"Tuples are not as flexible as lists because once you create a tuple, you cannot change its contents. However, this feature is advantageous in some situations. For instance, if a function is using a set of values that must not change, using a tuple can prevent accidental modification of those values, which could otherwise lead to bugs or incorrect results."),(0,l.kt)("h3",{id:"unpacking"},"Unpacking"),(0,l.kt)("p",null,"Tuples are commonly used for multiple assignment (also called unpacking)."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="main.py"',title:'"main.py"'},"x, y, z = (1, 2, 3)\nprint(x, y, z)  # Outputs 1 2 3\n")),(0,l.kt)("h3",{id:"return-multiple-values-from-a-function"},"Return Multiple Values from a Function"),(0,l.kt)("p",null,"Functions in Python can return multiple values using tuples."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="main.py"',title:'"main.py"'},"def min_max(nums):\n    return min(nums), max(nums)\n\nprint(min_max([1, 2, 3]))  # Outputs (1, 3)\n")),(0,l.kt)("p",null,"In general, tuples are less flexible than lists or dictionaries because they are immutable, and they do not have the range of methods that lists and dictionaries have. However, they are a basic data type that is used in many different contexts in Python, and understanding them is essential to writing Pythonic code."))}m.isMDXComponent=!0}}]);