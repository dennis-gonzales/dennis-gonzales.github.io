"use strict";(self.webpackChunkmy_learning_paths=self.webpackChunkmy_learning_paths||[]).push([[3508],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(n),d=i,g=u["".concat(s,".").concat(d)]||u[d]||m[d]||l;return n?a.createElement(g,r(r({ref:t},c),{},{components:n})):a.createElement(g,r({ref:t},c))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:i,r[1]=o;for(var p=2;p<l;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8113:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const l={},r="Diving Deep",o={unversionedId:"programming/languages/kotlin/data-types/collections/diving-deep",id:"programming/languages/kotlin/data-types/collections/diving-deep",title:"Diving Deep",description:"Depend upon Abstractions, Not Concretions",source:"@site/docs/programming/languages/kotlin/data-types/collections/diving-deep.md",sourceDirName:"programming/languages/kotlin/data-types/collections",slug:"/programming/languages/kotlin/data-types/collections/diving-deep",permalink:"/programming/languages/kotlin/data-types/collections/diving-deep",draft:!1,editUrl:"https://github.com/dennis-gonzales/dennis-gonzales.github.io/blob/main/docs/programming/languages/kotlin/data-types/collections/diving-deep.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Collections",permalink:"/programming/languages/kotlin/data-types/collections/"},next:{title:"Lists",permalink:"/programming/languages/kotlin/data-types/collections/lists"}},s={},p=[{value:"Depend upon Abstractions, Not Concretions",id:"depend-upon-abstractions-not-concretions",level:2},{value:"Lists",id:"lists",level:3},{value:"Maps",id:"maps",level:3},{value:"Sets",id:"sets",level:3},{value:"Usage of Data Classes",id:"usage-of-data-classes",level:2},{value:"Maps for Caching",id:"maps-for-caching",level:2},{value:"Maps for Counting",id:"maps-for-counting",level:2}],c={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"diving-deep"},"Diving Deep"),(0,i.kt)("h2",{id:"depend-upon-abstractions-not-concretions"},"Depend upon Abstractions, Not Concretions"),(0,i.kt)("p",null,"This principle, also known as the ",(0,i.kt)("strong",{parentName:"p"},"Dependency Inversion Principle"),", recommends using interfaces (abstractions) over concrete implementations for flexibility and adaptability in your code."),(0,i.kt)("h3",{id:"lists"},"Lists"),(0,i.kt)("p",null,"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"mutableListOf()")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"listOf()")," over ",(0,i.kt)("inlineCode",{parentName:"p"},"arrayListOf()")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"arrayOf()"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Main.kt"',title:'"Main.kt"'},"val lst = listOf<Int>(1, 2, 3, 4)\nval lst2 = mutableListOf<Int>(1, 2, 3, 4)\n")),(0,i.kt)("h3",{id:"maps"},"Maps"),(0,i.kt)("p",null,"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"mapOf()")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"mutableMapOf()")," over ",(0,i.kt)("inlineCode",{parentName:"p"},"hashMapOf()"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Main.kt"',title:'"Main.kt"'},'val map = mapOf<Int, String>(1 to "One", 2 to "Two")\nval map3 = mutableMapOf<Int, String>(Pair(3, "Three"))\n')),(0,i.kt)("h3",{id:"sets"},"Sets"),(0,i.kt)("p",null,"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"setOf()")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"mutableSetOf()")," over ",(0,i.kt)("inlineCode",{parentName:"p"},"hashSetOf()"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Main.kt"',title:'"Main.kt"'},'val set = setOf<String>("Apple", "Banana")\nval set3 = mutableSetOf<String>("Orange")\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Related Links:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"./lists#defining-a-list"},"Defining a List")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"./maps#defining-a-map"},"Defining a Map")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"./sets#defining-a-set"},"Defining a Set"))),(0,i.kt)("h2",{id:"usage-of-data-classes"},"Usage of Data Classes"),(0,i.kt)("p",null,"Data classes provide a concise way to create classes that are used to hold data. They automatically generate equals(), hashCode(), toString(), copy() and componentN() functions."),(0,i.kt)("p",null,"Example: Use a data class instead of a list with mixed types:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Main.kt"',title:'"Main.kt"'},'data class MyDataClass(val name: String, val number: Int)\n\nval dataList: List<MyDataClass> = listOf(\n    MyDataClass("One", 1),\n    MyDataClass("Two", 2),\n    MyDataClass("Three", 3)\n)\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Related Links:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"../../classes/data-class"},"Data Class"))),(0,i.kt)("h2",{id:"maps-for-caching"},"Maps for Caching"),(0,i.kt)("p",null," Maps can be used to store computed values for later use, which can greatly improve the efficiency of your code if the computation is expensive and the computed values are used repeatedly."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Main.kt"',title:'"Main.kt"'},"val squareCache = mutableMapOf<Int, Int>()\n\nfun square(n: Int): Int {\n    return squareCache.getOrPut(n) {\n        n * n  // This will only be computed if n is not in the cache\n    }\n}\n")),(0,i.kt)("h2",{id:"maps-for-counting"},"Maps for Counting"),(0,i.kt)("p",null,"If you want to count the occurrences of elements in a collection, you can use a map."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Main.kt"',title:'"Main.kt"'},"val list = listOf(1, 2, 2, 3, 3, 3, 4, 4, 4, 4)\nval countMap = list.groupingBy { it }.eachCount()  \nprintln(countMap)  // countMap will contain 1 to 1, 2 to 2, 3 to 3, 4 to 4\n")))}m.isMDXComponent=!0}}]);