"use strict";(self.webpackChunkmy_learning_paths=self.webpackChunkmy_learning_paths||[]).push([[5308],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>g});var s=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,s)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,s,a=function(e,n){if(null==e)return{};var t,s,a={},r=Object.keys(e);for(s=0;s<r.length;s++)t=r[s],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(s=0;s<r.length;s++)t=r[s],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=s.createContext({}),c=function(e){var n=s.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=c(e.components);return s.createElement(o.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return s.createElement(s.Fragment,{},n)}},d=s.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(t),d=a,g=p["".concat(o,".").concat(d)]||p[d]||m[d]||r;return t?s.createElement(g,l(l({ref:n},u),{},{components:t})):s.createElement(g,l({ref:n},u))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,l=new Array(r);l[0]=d;var i={};for(var o in n)hasOwnProperty.call(n,o)&&(i[o]=n[o]);i.originalType=e,i[p]="string"==typeof e?e:a,l[1]=i;for(var c=2;c<r;c++)l[c]=t[c];return s.createElement.apply(null,l)}return s.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6421:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var s=t(7462),a=(t(7294),t(3905));const r={},l="Inner Class",i={unversionedId:"programming/languages/kotlin/classes/inner-class",id:"programming/languages/kotlin/classes/inner-class",title:"Inner Class",description:"An inner class is a class which is nested within another class. An object of an inner class cannot exist without an instance of the outer class and can access its members.",source:"@site/docs/programming/languages/kotlin/classes/inner-class.md",sourceDirName:"programming/languages/kotlin/classes",slug:"/programming/languages/kotlin/classes/inner-class",permalink:"/programming/languages/kotlin/classes/inner-class",draft:!1,editUrl:"https://github.com/dennis-gonzales/dennis-gonzales.github.io/blob/main/docs/programming/languages/kotlin/classes/inner-class.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Data Class",permalink:"/programming/languages/kotlin/classes/data-class"},next:{title:"Open Class",permalink:"/programming/languages/kotlin/classes/open-class"}},o={},c=[{value:"Defining an Inner Class",id:"defining-an-inner-class",level:2},{value:"Accessing Outer Class Members",id:"accessing-outer-class-members",level:2},{value:"Common Pitfalls and Best Practices",id:"common-pitfalls-and-best-practices",level:2},{value:"Memory Leaks",id:"memory-leaks",level:3},{value:"Non-inner Nested Classes",id:"non-inner-nested-classes",level:3},{value:"Design Patterns",id:"design-patterns",level:2}],u={toc:c},p="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(p,(0,s.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"inner-class"},"Inner Class"),(0,a.kt)("p",null,"An inner class is a class which is nested within another class. An object of an inner class cannot exist without an instance of the outer class and can access its members."),(0,a.kt)("h2",{id:"defining-an-inner-class"},"Defining an Inner Class"),(0,a.kt)("p",null,"An inner class is defined within an outer class using the ",(0,a.kt)("inlineCode",{parentName:"p"},"inner")," keyword, followed by the ",(0,a.kt)("inlineCode",{parentName:"p"},"class")," keyword, and the class name."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="InnerClassDefinition.kt"',title:'"InnerClassDefinition.kt"'},"class Outer {\n    inner class Inner {\n        // Class body goes here\n    }\n}\n")),(0,a.kt)("h2",{id:"accessing-outer-class-members"},"Accessing Outer Class Members"),(0,a.kt)("p",null,"Inner classes carry a reference to an object of an outer class:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="AccessOuterClassMembers.kt"',title:'"AccessOuterClassMembers.kt"'},'class Outer {\n    private val welcomeMessage: String = "Hello, World!"\n\n    inner class Inner {\n        fun greet() {\n            println(welcomeMessage) // Can access outer class member\n        }\n    }\n}\n\nfun main() {\n    val inner = Outer().Inner()\n    inner.greet() // Prints: Hello, World!\n}\n')),(0,a.kt)("p",null,"In the above example, ",(0,a.kt)("inlineCode",{parentName:"p"},"Inner")," is an inner class that can access the ",(0,a.kt)("inlineCode",{parentName:"p"},"welcomeMessage")," property of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Outer")," class."),(0,a.kt)("h2",{id:"common-pitfalls-and-best-practices"},"Common Pitfalls and Best Practices"),(0,a.kt)("h3",{id:"memory-leaks"},"Memory Leaks"),(0,a.kt)("p",null,"Since inner classes carry a reference to an object of the outer class, they can unintentionally hold a reference to the full outer class, leading to memory leaks, particularly in contexts such as anonymous inner classes for listeners in Android. Be mindful of your usage of inner classes within lifecycle-aware components."),(0,a.kt)("h3",{id:"non-inner-nested-classes"},"Non-inner Nested Classes"),(0,a.kt)("p",null,"By default, nested classes in Kotlin do not have access to the outer class instance. If you don't need to access the outer class instance, you can declare the nested class without the ",(0,a.kt)("inlineCode",{parentName:"p"},"inner")," keyword:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="NestedClass.kt"',title:'"NestedClass.kt"'},"class Outer {\n    class Nested {\n        // This is a static nested class\n    }\n}\n")),(0,a.kt)("h2",{id:"design-patterns"},"Design Patterns"),(0,a.kt)("p",null,"In the context of design patterns, inner classes can be useful in various scenarios:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"In the Factory Method pattern, an inner class can serve as a concrete creator that has access to private members of the outer class."),(0,a.kt)("li",{parentName:"ul"},"In the Builder pattern, the Builder can be an inner class of the class it builds, allowing it to access private constructors or members.")),(0,a.kt)("p",null,"Inner classes can be a powerful tool when you need to create classes that are logically bound to the outer class, have access to the outer class's private members, or control the visibility of the nested class. However, they should be used judiciously to avoid unnecessary complexity or memory leaks."))}m.isMDXComponent=!0}}]);