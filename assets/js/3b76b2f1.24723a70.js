"use strict";(self.webpackChunkmy_learning_paths=self.webpackChunkmy_learning_paths||[]).push([[1157],{3905:(e,s,a)=>{a.d(s,{Zo:()=>d,kt:()=>g});var t=a(7294);function n(e,s,a){return s in e?Object.defineProperty(e,s,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[s]=a,e}function l(e,s){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);s&&(t=t.filter((function(s){return Object.getOwnPropertyDescriptor(e,s).enumerable}))),a.push.apply(a,t)}return a}function r(e){for(var s=1;s<arguments.length;s++){var a=null!=arguments[s]?arguments[s]:{};s%2?l(Object(a),!0).forEach((function(s){n(e,s,a[s])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(s){Object.defineProperty(e,s,Object.getOwnPropertyDescriptor(a,s))}))}return e}function i(e,s){if(null==e)return{};var a,t,n=function(e,s){if(null==e)return{};var a,t,n={},l=Object.keys(e);for(t=0;t<l.length;t++)a=l[t],s.indexOf(a)>=0||(n[a]=e[a]);return n}(e,s);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)a=l[t],s.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var o=t.createContext({}),c=function(e){var s=t.useContext(o),a=s;return e&&(a="function"==typeof e?e(s):r(r({},s),e)),a},d=function(e){var s=c(e.components);return t.createElement(o.Provider,{value:s},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var s=e.children;return t.createElement(t.Fragment,{},s)}},m=t.forwardRef((function(e,s){var a=e.components,n=e.mdxType,l=e.originalType,o=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=c(a),m=n,g=u["".concat(o,".").concat(m)]||u[m]||p[m]||l;return a?t.createElement(g,r(r({ref:s},d),{},{components:a})):t.createElement(g,r({ref:s},d))}));function g(e,s){var a=arguments,n=s&&s.mdxType;if("string"==typeof e||n){var l=a.length,r=new Array(l);r[0]=m;var i={};for(var o in s)hasOwnProperty.call(s,o)&&(i[o]=s[o]);i.originalType=e,i[u]="string"==typeof e?e:n,r[1]=i;for(var c=2;c<l;c++)r[c]=a[c];return t.createElement.apply(null,r)}return t.createElement.apply(null,a)}m.displayName="MDXCreateElement"},2639:(e,s,a)=>{a.r(s),a.d(s,{assets:()=>o,contentTitle:()=>r,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var t=a(7462),n=(a(7294),a(3905));const l={},r="Sealed Class",i={unversionedId:"programming/languages/kotlin/classes/sealed-class",id:"programming/languages/kotlin/classes/sealed-class",title:"Sealed Class",description:"Sealed classes in Kotlin are used to represent restricted class hierarchies, where a value can be one of a set of types, but cannot be any other type. They are, in a sense, an extension of enum classes: the set of values for an enum type is also restricted, but each enum constant exists only as a single instance, whereas a subclass of a sealed class can have multiple instances, each with its own state.",source:"@site/docs/programming/languages/kotlin/classes/sealed-class.md",sourceDirName:"programming/languages/kotlin/classes",slug:"/programming/languages/kotlin/classes/sealed-class",permalink:"/programming/languages/kotlin/classes/sealed-class",draft:!1,editUrl:"https://github.com/dennis-gonzales/dennis-gonzales.github.io/blob/main/docs/programming/languages/kotlin/classes/sealed-class.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Open Class",permalink:"/programming/languages/kotlin/classes/open-class"},next:{title:"Singleton Class",permalink:"/programming/languages/kotlin/classes/singleton-class"}},o={},c=[{value:"Defining a Sealed Class",id:"defining-a-sealed-class",level:2},{value:"Subclasses of Sealed Class",id:"subclasses-of-sealed-class",level:2},{value:"Using When Expression",id:"using-when-expression",level:2},{value:"Common Pitfalls and Best Practices",id:"common-pitfalls-and-best-practices",level:2},{value:"Sealed Class vs. Enum Class",id:"sealed-class-vs-enum-class",level:3},{value:"Sealed Classes and Data Classes",id:"sealed-classes-and-data-classes",level:3},{value:"Design Patterns",id:"design-patterns",level:2}],d={toc:c},u="wrapper";function p(e){let{components:s,...a}=e;return(0,n.kt)(u,(0,t.Z)({},d,a,{components:s,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"sealed-class"},"Sealed Class"),(0,n.kt)("p",null,"Sealed classes in Kotlin are used to represent restricted class hierarchies, where a value can be one of a set of types, but cannot be any other type. They are, in a sense, an extension of enum classes: the set of values for an enum type is also restricted, but each enum constant exists only as a single instance, whereas a subclass of a sealed class can have multiple instances, each with its own state."),(0,n.kt)("h2",{id:"defining-a-sealed-class"},"Defining a Sealed Class"),(0,n.kt)("p",null,"A sealed class is declared with the ",(0,n.kt)("inlineCode",{parentName:"p"},"sealed")," modifier. It is abstract by itself and cannot be instantiated directly. It can have abstract members and can also have a constructor, which is private by default."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="SealedClassDefinition.kt"',title:'"SealedClassDefinition.kt"'},"sealed class Result {\n    // Sealed class body goes here\n}\n")),(0,n.kt)("h2",{id:"subclasses-of-sealed-class"},"Subclasses of Sealed Class"),(0,n.kt)("p",null,"All subclasses of a sealed class must be declared in the same file as the sealed class itself. The subclasses can be of two types: object declaration or regular class."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="SealedClassSubclasses.kt"',title:'"SealedClassSubclasses.kt"'},"sealed class Result {\n    class Success(val data: String): Result()\n    class Error(val error: String): Result()\n}\n")),(0,n.kt)("p",null,"In the above example, ",(0,n.kt)("inlineCode",{parentName:"p"},"Result")," is a sealed class with two subclasses: ",(0,n.kt)("inlineCode",{parentName:"p"},"Success")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"Error"),"."),(0,n.kt)("h2",{id:"using-when-expression"},"Using When Expression"),(0,n.kt)("p",null,"One of the main benefits of sealed classes comes into play when you use them in a ",(0,n.kt)("inlineCode",{parentName:"p"},"when")," expression. If it's possible to verify that the statement covers all cases, you don't need to add an ",(0,n.kt)("inlineCode",{parentName:"p"},"else")," clause to the statement."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="SealedClassWhenExpression.kt"',title:'"SealedClassWhenExpression.kt"'},"fun handleResult(result: Result) = when(result) {\n    is Result.Success -> println(result.data)\n    is Result.Error -> println(result.error)\n}\n")),(0,n.kt)("h2",{id:"common-pitfalls-and-best-practices"},"Common Pitfalls and Best Practices"),(0,n.kt)("h3",{id:"sealed-class-vs-enum-class"},"Sealed Class vs. Enum Class"),(0,n.kt)("p",null,"Sealed classes are more flexible than enum classes as they can have multiple instances which can contain state."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="SealedClassVsEnumClass.kt"',title:'"SealedClassVsEnumClass.kt"'},"sealed class Expr {\n    data class Const(val number: Double) : Expr()\n    data class Sum(val e1: Expr, val e2: Expr) : Expr()\n    object NotANumber : Expr()\n}\n")),(0,n.kt)("h3",{id:"sealed-classes-and-data-classes"},"Sealed Classes and Data Classes"),(0,n.kt)("p",null,"Sealed classes can be data classes. This can provide automatic ",(0,n.kt)("inlineCode",{parentName:"p"},"hashCode()"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"equals()"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"copy()"),", and ",(0,n.kt)("inlineCode",{parentName:"p"},"toString()")," methods."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="SealedDataClasses.kt"',title:'"SealedDataClasses.kt"'},"sealed class Result {\n    data class Success(val data: String): Result()\n    data class Error(val error: String): Result()\n}\n")),(0,n.kt)("h2",{id:"design-patterns"},"Design Patterns"),(0,n.kt)("p",null,"Sealed classes are useful in several design patterns:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"State pattern:")," Sealed classes are great for representing a finite number of states. You can represent each possible state as a subclass of the sealed class."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Event handling:")," Events in an application can be modeled as a sealed class, with different event types as subclasses. This allows you to handle events in a type-safe manner."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Result handling:")," A function that can return different types of results can return a sealed class, with different result types as subclasses.")),(0,n.kt)("p",null,"Sealed classes, when used appropriately, can make your code more readable, maintainable, and easier to test. They enforce a finite set of possibilities which can be known at compile time, leading to safer code."))}p.isMDXComponent=!0}}]);