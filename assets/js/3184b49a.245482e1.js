"use strict";(self.webpackChunkmy_learning_paths=self.webpackChunkmy_learning_paths||[]).push([[2343],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>g});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(t),f=i,g=p["".concat(l,".").concat(f)]||p[f]||m[f]||a;return t?r.createElement(g,o(o({ref:n},u),{},{components:t})):r.createElement(g,o({ref:n},u))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=f;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[p]="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},1153:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=t(7462),i=(t(7294),t(3905));const a={sidebar_position:3},o="Functions",s={unversionedId:"programming/languages/typescript/functions/index",id:"programming/languages/typescript/functions/index",title:"Functions",description:"Functions are the fundamental building block of any application in TypeScript. They define a set of actions to perform on inputs in order to produce outputs.",source:"@site/docs/programming/languages/typescript/functions/index.mdx",sourceDirName:"programming/languages/typescript/functions",slug:"/programming/languages/typescript/functions/",permalink:"/programming/languages/typescript/functions/",draft:!1,editUrl:"https://github.com/dennis-gonzales/dennis-gonzales.github.io/blob/main/docs/programming/languages/typescript/functions/index.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Data Types",permalink:"/programming/languages/typescript/data-types/"},next:{title:"Functional Programming",permalink:"/programming/languages/typescript/functions/functional-programming"}},l={},c=[{value:"Function Declaration",id:"function-declaration",level:2},{value:"Function Expressions",id:"function-expressions",level:2},{value:"Arrow Functions",id:"arrow-functions",level:2},{value:"Anonymous Functions",id:"anonymous-functions",level:2},{value:"Rest Parameters",id:"rest-parameters",level:2},{value:"Common Pitfalls",id:"common-pitfalls",level:2},{value:"Not Using TypeScript&#39;s Type Checking for Functions",id:"not-using-typescripts-type-checking-for-functions",level:3},{value:"Ignoring Return Values",id:"ignoring-return-values",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Use Arrow Functions for Short, Single-Expression Functions",id:"use-arrow-functions-for-short-single-expression-functions",level:3},{value:"Always Specify Function Return Types",id:"always-specify-function-return-types",level:3},{value:"Use Descriptive Function Names",id:"use-descriptive-function-names",level:3},{value:"Design Patterns",id:"design-patterns",level:2},{value:"Callbacks",id:"callbacks",level:3}],u={toc:c},p="wrapper";function m(e){let{components:n,...t}=e;return(0,i.kt)(p,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"functions"},"Functions"),(0,i.kt)("p",null,"Functions are the fundamental building block of any application in TypeScript. They define a set of actions to perform on inputs in order to produce outputs."),(0,i.kt)("h2",{id:"function-declaration"},"Function Declaration"),(0,i.kt)("p",null,"You can define a function in TypeScript using the ",(0,i.kt)("inlineCode",{parentName:"p"},"function")," keyword. The following example defines a simple function named ",(0,i.kt)("inlineCode",{parentName:"p"},"greet"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="FunctionDeclarationExample.ts"',title:'"FunctionDeclarationExample.ts"'},'// highlight-next-line\nfunction greet(name: string): string {\n  return "Hello, " + name;\n}\n')),(0,i.kt)("h2",{id:"function-expressions"},"Function Expressions"),(0,i.kt)("p",null,"Functions can also be defined using function expressions. A function expression can be stored in a variable."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="FunctionExpressionExample.ts"',title:'"FunctionExpressionExample.ts"'},'// highlight-next-line\nlet greet = function(name: string): string {\n  return "Hello, " + name;\n};\n')),(0,i.kt)("h2",{id:"arrow-functions"},"Arrow Functions"),(0,i.kt)("p",null,"Arrow functions provide a compact syntax to define a function expression. They are useful when you need to create an anonymous function."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="ArrowFunctionExample.ts"',title:'"ArrowFunctionExample.ts"'},'// highlight-next-line\nlet greet = (name: string): string => {\n  return "Hello, " + name;\n};\n')),(0,i.kt)("h2",{id:"anonymous-functions"},"Anonymous Functions"),(0,i.kt)("p",null,"Anonymous functions are functions that are defined without a name. These functions are often used for short, specific tasks and can be passed as arguments to other functions, like callbacks."),(0,i.kt)("p",null,"Anonymous functions can be expressed using both traditional function expressions and arrow functions. Here's an example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="AnonymousFunctionExample.ts"',title:'"AnonymousFunctionExample.ts"'}," // Using an anonymous function with function expression\n // highlight-next-line\nconst doubledArray = [1, 2, 3].map(function(x) { return x * 2; });\n// Using an anonymous function with arrow function\n// highlight-next-line\nconst doubledArray = [1, 2, 3].map(x => x * 2);\n\nconsole.log(doubledArray);\n")),(0,i.kt)("h2",{id:"rest-parameters"},"Rest Parameters"),(0,i.kt)("p",null,"Rest parameters allow us to represent an indefinite number of arguments as an array."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="RestParametersExample.ts"',title:'"RestParametersExample.ts"'},'function buildName(firstName: string, ...restOfName: string[]) {\n  return firstName + " " + restOfName.join(" ");\n}\n\nlet fullName = buildName("John", "Doe", "Smith", "Jr.");\nconsole.log(fullName); // Outputs: "John Doe Smith Jr."\n')),(0,i.kt)("h2",{id:"common-pitfalls"},"Common Pitfalls"),(0,i.kt)("h3",{id:"not-using-typescripts-type-checking-for-functions"},"Not Using TypeScript's Type Checking for Functions"),(0,i.kt)("p",null,"One of the key benefits of TypeScript is its ability to type-check your code and catch errors at compile time. Always use TypeScript's type annotations for function parameters and return values to get the most out of the language's type checking."),(0,i.kt)("h3",{id:"ignoring-return-values"},"Ignoring Return Values"),(0,i.kt)("p",null,"If a function is designed to return a value, make sure to use or store that value when calling the function."),(0,i.kt)("h2",{id:"best-practices"},"Best Practices"),(0,i.kt)("h3",{id:"use-arrow-functions-for-short-single-expression-functions"},"Use Arrow Functions for Short, Single-Expression Functions"),(0,i.kt)("p",null,"Arrow functions provide a shorter syntax for function expressions. They are especially handy when you want to return a single expression."),(0,i.kt)("h3",{id:"always-specify-function-return-types"},"Always Specify Function Return Types"),(0,i.kt)("p",null,"While TypeScript can often infer the return type of a function, it's a good practice to always explicitly specify it. This makes the function's contract clearer to anyone reading the code."),(0,i.kt)("h3",{id:"use-descriptive-function-names"},"Use Descriptive Function Names"),(0,i.kt)("p",null,"Choose function names that clearly describe what the function does. This makes your code easier to read and understand."),(0,i.kt)("h2",{id:"design-patterns"},"Design Patterns"),(0,i.kt)("h3",{id:"callbacks"},"Callbacks"),(0,i.kt)("p",null,"A callback is a function passed to another function, allowing for customizable behavior. For example, ",(0,i.kt)("inlineCode",{parentName:"p"},"processArray")," takes an array and a callback, applying the callback to each element."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// highlight-next-line\nfunction processArray(arr: number[], callback: (a: number) => number): number[] {\n  return arr.map(callback);\n}\n\nconst result = processArray([1, 2, 3], x => x * 2);\nconsole.log(result); // Outputs: [2, 4, 6]\n")),(0,i.kt)("p",null,"Here, the anonymous callback function doubles each value, so the result is an array with doubled values."))}m.isMDXComponent=!0}}]);