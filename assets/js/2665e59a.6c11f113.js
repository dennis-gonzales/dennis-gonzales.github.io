"use strict";(self.webpackChunkmy_learning_paths=self.webpackChunkmy_learning_paths||[]).push([[2042],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,o=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),m=p(n),d=i,h=m["".concat(o,".").concat(d)]||m[d]||c[d]||s;return n?a.createElement(h,l(l({ref:t},u),{},{components:n})):a.createElement(h,l({ref:t},u))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,l=new Array(s);l[0]=d;var r={};for(var o in t)hasOwnProperty.call(t,o)&&(r[o]=t[o]);r.originalType=e,r[m]="string"==typeof e?e:i,l[1]=r;for(var p=2;p<s;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7266:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>c,frontMatter:()=>s,metadata:()=>r,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const s={},l="List",r={unversionedId:"programming/languages/python/data-types/list",id:"programming/languages/python/data-types/list",title:"List",description:"In Python, a list is a mutable sequence type, i.e., it can be changed after creation. It is similar to an array, but can contain elements of different types.",source:"@site/docs/programming/languages/python/data-types/list.md",sourceDirName:"programming/languages/python/data-types",slug:"/programming/languages/python/data-types/list",permalink:"/programming/languages/python/data-types/list",draft:!1,editUrl:"https://github.com/dennis-gonzales/dennis-gonzales.github.io/blob/main/docs/programming/languages/python/data-types/list.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Dictionary",permalink:"/programming/languages/python/data-types/dict"},next:{title:"Tuple",permalink:"/programming/languages/python/data-types/tuple"}},o={},p=[{value:"Understanding List",id:"understanding-list",level:2},{value:"User-Defined Types",id:"user-defined-types",level:3},{value:"Nesting",id:"nesting",level:3},{value:"Unhashable",id:"unhashable",level:3},{value:"Common Pitfalls",id:"common-pitfalls",level:2},{value:"Changing Lists During Iteration",id:"changing-lists-during-iteration",level:3},{value:"List Index Out of Range",id:"list-index-out-of-range",level:3},{value:"Mutable Default Arguments",id:"mutable-default-arguments",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"List Comprehensions",id:"list-comprehensions",level:3},{value:"Slicing",id:"slicing",level:3},{value:"Iterating",id:"iterating",level:3},{value:"Avoid Large Numerical Data",id:"avoid-large-numerical-data",level:3},{value:"Design Patterns",id:"design-patterns",level:2},{value:"Lists as Stacks",id:"lists-as-stacks",level:3},{value:"Lists as Queues",id:"lists-as-queues",level:3}],u={toc:p},m="wrapper";function c(e){let{components:t,...n}=e;return(0,i.kt)(m,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"list"},"List"),(0,i.kt)("p",null,"In Python, a list is a mutable sequence type, i.e., it can be changed after creation. It is similar to an ",(0,i.kt)("a",{parentName:"p",href:"./array"},"array"),", but can contain elements of different types."),(0,i.kt)("p",null,"Here's an example of a list:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="main.py"',title:'"main.py"'},'my_list = [1, "Hello", 3.14]\n')),(0,i.kt)("p",null,"You can access, add, remove, and change elements of a list:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="main.py"',title:'"main.py"'},'print(my_list[1])  # Access element - Outputs "Hello"\n\nmy_list.append("World")  # Add element\nprint(my_list)  # Outputs [1, "Hello", 3.14, "World"]\n\nmy_list.remove("Hello")  # Remove element\nprint(my_list)  # Outputs [1, 3.14, "World"]\n\nmy_list[0] = "Goodbye"  # Change element\nprint(my_list)  # Outputs ["Goodbye", 3.14, "World"]\n')),(0,i.kt)("h2",{id:"understanding-list"},"Understanding List"),(0,i.kt)("p",null,"A Python list can hold any data type. That includes built-in types like integers, floats, strings, and other collections like tuples, sets, and dictionaries, as well as instances of user-defined classes."),(0,i.kt)("p",null,"Here is an example of a list holding different data types:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# Standard built-in types\nlist1 = [1, 2.2, "three", True]\n\n# Complex types\nlist2 = [[1, 2, 3], {"key": "value"}, (4, 5, 6), {7, 8, 9}]\n')),(0,i.kt)("h3",{id:"user-defined-types"},"User-Defined Types"),(0,i.kt)("p",null,"Here's an example with user-defined classes:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# User-defined types\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\np1 = Person("Alice", 25)\np2 = Person("Bob", 30)\nlist3 = [p1, p2]  # This is a list containing Person objects\n')),(0,i.kt)("h3",{id:"nesting"},"Nesting"),(0,i.kt)("p",null,"Yes, a Python list can hold nested lists:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# Nested lists\nlist4 = [1, 2, [3, 4, 5], 6, 7]\n\n")),(0,i.kt)("h3",{id:"unhashable"},"Unhashable"),(0,i.kt)("p",null,"It's important to note that while lists can contain almost any type of data, lists themselves are not hashable."),(0,i.kt)("p",null,"list is mutable, meaning its contents can change after it is created. This violates one of the requirements for an object to be hashable, which is that the object's hash value must not change during its lifetime."),(0,i.kt)("p",null,"If you try to hash a list, you'll get a ",(0,i.kt)("inlineCode",{parentName:"p"},"TypeError"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"my_list = [1, 2, 3]\nprint(hash(my_list))  # This will raise a TypeError: unhashable type: 'list'\n")),(0,i.kt)("p",null,"This restriction is by design, because it allows lists to be used in ways that hashable types cannot. For example, you can append, insert, or remove elements from a list, or change the value of its elements, none of which would be possible if the list were hashable."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Related Links:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"../data-types#mutable-vs-immutable-types"},"Mutable vs Immutable Types"))),(0,i.kt)("h2",{id:"common-pitfalls"},"Common Pitfalls"),(0,i.kt)("h3",{id:"changing-lists-during-iteration"},"Changing Lists During Iteration"),(0,i.kt)("p",null,"Modifying a list while iterating over it can lead to unexpected results because the iterator is not aware of the changes."),(0,i.kt)("h3",{id:"list-index-out-of-range"},"List Index Out of Range"),(0,i.kt)("p",null,"Trying to access a list element that does not exist will result in an ",(0,i.kt)("inlineCode",{parentName:"p"},"IndexError"),"."),(0,i.kt)("h3",{id:"mutable-default-arguments"},"Mutable Default Arguments"),(0,i.kt)("p",null,"Default arguments in functions are created once at function definition. If a mutable object like a list is used as a default argument, it can retain changes between function calls."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Related Links:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"../variables#mutable-default-argument"},"Mutable Default Arguments"))),(0,i.kt)("h2",{id:"best-practices"},"Best Practices"),(0,i.kt)("h3",{id:"list-comprehensions"},"List Comprehensions"),(0,i.kt)("p",null,"List comprehensions provide a concise way to create lists based on existing lists. For example, you can create a list of squares using the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="main.py"',title:'"main.py"'},"squares = [x**2 for x in range(10)]\n")),(0,i.kt)("h3",{id:"slicing"},"Slicing"),(0,i.kt)("p",null,"Use slicing to access parts of a list."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="main.py"',title:'"main.py"'},"first_two = my_list[:2]\n")),(0,i.kt)("h3",{id:"iterating"},"Iterating"),(0,i.kt)("p",null,"You can iterate over the elements of a list directly."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="main.py"',title:'"main.py"'},"for element in my_list:\n    print(element)\n")),(0,i.kt)("h3",{id:"avoid-large-numerical-data"},"Avoid Large Numerical Data"),(0,i.kt)("p",null,"If you're working with large amounts of numerical data, a Python list might not be the best choice. Libraries like NumPy provide specialized data structures that are more efficient for numerical data."),(0,i.kt)("h2",{id:"design-patterns"},"Design Patterns"),(0,i.kt)("p",null,"While there are no specific design patterns centered around lists, lists are a fundamental data structure in Python and are used in many different contexts. For example:"),(0,i.kt)("h3",{id:"lists-as-stacks"},"Lists as Stacks"),(0,i.kt)("p",null,"The list methods make it very easy to use a list as a stack, where the last element added is the first element retrieved (\u201clast-in, first-out\u201d)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="main.py"',title:'"main.py"'},"stack = [3, 4, 5]\nstack.append(6)  # Push\nprint(stack.pop())  # Pop - Outputs 6\n")),(0,i.kt)("p",null,"In Python, the ",(0,i.kt)("inlineCode",{parentName:"p"},"list")," data type provides methods such as ",(0,i.kt)("inlineCode",{parentName:"p"},"append()")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"pop()")," which can be used to implement the behavior of a stack. For example, you can use ",(0,i.kt)("inlineCode",{parentName:"p"},"append()")," to push an item onto the stack and ",(0,i.kt)("inlineCode",{parentName:"p"},"pop()")," to remove an item from the top of the stack. This is efficient because both operations are O(1), meaning they take the same amount of time regardless of the size of the list."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Popping at ",(0,i.kt)("strong",{parentName:"p"},"arbitrary positions")," can be much slower (O(n)):"),(0,i.kt)("p",{parentName:"admonition"},"When you pop from the end of a list, it's O(1). When you pop from anywhere else in the list, it's O(n).")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"While lists in Python can be used to implement stack operations efficiently, for larger and more complex applications where both queue and stack operations are needed, using collections like ",(0,i.kt)("inlineCode",{parentName:"p"},"deque")," would be more efficient and versatile.")),(0,i.kt)("h3",{id:"lists-as-queues"},"Lists as Queues"),(0,i.kt)("p",null,"It is also possible to use a list as a queue, where the first element added is the first element retrieved (\u201cfirst-in, first-out\u201d)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="main.py"',title:'"main.py"'},'from collections import deque\n\nqueue = deque(["Eric", "John", "Michael"])\nqueue.append("Terry")  # Terry arrives\nprint(queue.popleft())  # Eric leaves - Outputs "Eric"\n')),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},'You can use list operations to simulate a queue\'s "First-In, First-Out" (FIFO) behavior. However, lists in Python are not optimized for this use-case.')),(0,i.kt)("p",null,"In the examples above, we used lists to create stack and queue data structures. This demonstrates the flexibility and power of lists in Python."))}c.isMDXComponent=!0}}]);