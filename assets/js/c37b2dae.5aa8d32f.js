"use strict";(self.webpackChunkmy_learning_paths=self.webpackChunkmy_learning_paths||[]).push([[3521],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=u(n),p=r,f=m["".concat(s,".").concat(p)]||m[p]||d[p]||i;return n?a.createElement(f,o(o({ref:t},c),{},{components:n})):a.createElement(f,o({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:r,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},2991:(e,t,n)=>{n.d(t,{Z:()=>k});var a=n(7294),r=n(6010),i=n(2802),o=n(9960),l=n(3919),s=n(5999);const u={cardContainer:"cardContainer_fWXF",cardTitle:"cardTitle_rnsV",cardDescription:"cardDescription_PWke"};function c(e){let{href:t,children:n}=e;return a.createElement(o.Z,{href:t,className:(0,r.Z)("card padding--lg",u.cardContainer)},n)}function m(e){let{href:t,icon:n,title:i,description:o}=e;return a.createElement(c,{href:t},a.createElement("h2",{className:(0,r.Z)("text--truncate",u.cardTitle),title:i},n," ",i),o&&a.createElement("p",{className:(0,r.Z)("text--truncate",u.cardDescription),title:o},o))}function d(e){let{item:t}=e;const n=(0,i.Wl)(t);return n?a.createElement(m,{href:n,icon:"\ud83d\uddc3\ufe0f",title:t.label,description:t.description??(0,s.I)({message:"{count} items",id:"theme.docs.DocCard.categoryDescription",description:"The default description for a category card in the generated index about how many items this category includes"},{count:t.items.length})}):null}function p(e){let{item:t}=e;const n=(0,l.Z)(t.href)?"\ud83d\udcc4\ufe0f":"\ud83d\udd17",r=(0,i.xz)(t.docId??void 0);return a.createElement(m,{href:t.href,icon:n,title:t.label,description:t.description??r?.description})}function f(e){let{item:t}=e;switch(t.type){case"link":return a.createElement(p,{item:t});case"category":return a.createElement(d,{item:t});default:throw new Error(`unknown item type ${JSON.stringify(t)}`)}}function g(e){let{className:t}=e;const n=(0,i.jA)();return a.createElement(k,{items:n.items,className:t})}function k(e){const{items:t,className:n}=e;if(!t)return a.createElement(g,e);const o=(0,i.MN)(t);return a.createElement("section",{className:(0,r.Z)("row",n)},o.map(((e,t)=>a.createElement("article",{key:t,className:"col col--6 margin-bottom--lg"},a.createElement(f,{item:e})))))}},3049:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(7462),r=(n(7294),n(3905)),i=n(2991);const o={sidebar_position:3},l="Functions",s={unversionedId:"programming/languages/kotlin/functions/index",id:"programming/languages/kotlin/functions/index",title:"Functions",description:"Functions in Kotlin are declared using the fun keyword. Functions allow you to break your code into reusable pieces, making it more readable and modular.",source:"@site/docs/programming/languages/kotlin/functions/index.mdx",sourceDirName:"programming/languages/kotlin/functions",slug:"/programming/languages/kotlin/functions/",permalink:"/programming/languages/kotlin/functions/",draft:!1,editUrl:"https://github.com/dennis-gonzales/dennis-gonzales.github.io/blob/main/docs/programming/languages/kotlin/functions/index.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Strings",permalink:"/programming/languages/kotlin/data-types/strings"},next:{title:"Deep Dive",permalink:"/programming/languages/kotlin/functions/deep-dive"}},u={},c=[{value:"Defining a Function",id:"defining-a-function",level:2},{value:"Function Parameters",id:"function-parameters",level:2},{value:"Function Return Values",id:"function-return-values",level:2},{value:"Default Arguments",id:"default-arguments",level:2},{value:"Named Arguments",id:"named-arguments",level:2},{value:"Common Pitfalls and Best Practices",id:"common-pitfalls-and-best-practices",level:2},{value:"Overusing Default Arguments",id:"overusing-default-arguments",level:3},{value:"Single Expression Functions",id:"single-expression-functions",level:3},{value:"Documenting Functions",id:"documenting-functions",level:3},{value:"Design Patterns",id:"design-patterns",level:2}],m={toc:c},d="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"functions"},"Functions"),(0,r.kt)("p",null,"Functions in Kotlin are declared using the ",(0,r.kt)("inlineCode",{parentName:"p"},"fun")," keyword. Functions allow you to break your code into reusable pieces, making it more readable and modular. "),(0,r.kt)("h2",{id:"defining-a-function"},"Defining a Function"),(0,r.kt)("p",null,"A function is defined with the ",(0,r.kt)("inlineCode",{parentName:"p"},"fun")," keyword, followed by the function name, a list of zero or more comma-separated parameters, an optional return type, and a body."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="FunctionDefinition.kt"',title:'"FunctionDefinition.kt"'},'fun greet(): Unit {\n    println("Hello, World!")\n}\n')),(0,r.kt)("p",null,"In the above example, ",(0,r.kt)("inlineCode",{parentName:"p"},"greet")," is a function that takes no parameters, returns no meaningful value (its return type is ",(0,r.kt)("inlineCode",{parentName:"p"},"Unit"),', which can be omitted), and prints "Hello, World!" when called.'),(0,r.kt)("h2",{id:"function-parameters"},"Function Parameters"),(0,r.kt)("p",null,"Functions can take parameters, allowing you to pass data into them. Parameters are defined in the function signature inside parentheses after the function name."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="FunctionParameters.kt"',title:'"FunctionParameters.kt"'},'fun greet(name: String): Unit {\n    println("Hello, $name!")\n}\n')),(0,r.kt)("p",null,"In the above example, the ",(0,r.kt)("inlineCode",{parentName:"p"},"greet")," function takes one parameter: ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," of type ",(0,r.kt)("inlineCode",{parentName:"p"},"String"),"."),(0,r.kt)("h2",{id:"function-return-values"},"Function Return Values"),(0,r.kt)("p",null,"Functions can return a value, which can be used elsewhere in your code. The return type is declared after the parameters, and the ",(0,r.kt)("inlineCode",{parentName:"p"},"return")," keyword is used to specify the return value."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="FunctionReturn.kt"',title:'"FunctionReturn.kt"'},"fun add(a: Int, b: Int): Int {\n    return a + b\n}\n")),(0,r.kt)("p",null,"In the above example, the ",(0,r.kt)("inlineCode",{parentName:"p"},"add")," function takes two parameters (both of type ",(0,r.kt)("inlineCode",{parentName:"p"},"Int"),") and returns an ",(0,r.kt)("inlineCode",{parentName:"p"},"Int"),"."),(0,r.kt)("h2",{id:"default-arguments"},"Default Arguments"),(0,r.kt)("p",null,"Kotlin supports default argument values assigned in the function signature. If a value is not provided when calling the function, the default value is used."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="DefaultArguments.kt"',title:'"DefaultArguments.kt"'},'fun greet(name: String = "World"): Unit {\n    println("Hello, $name!")\n}\n')),(0,r.kt)("h2",{id:"named-arguments"},"Named Arguments"),(0,r.kt)("p",null,"When calling a function, Kotlin allows you to specify argument names. This is particularly useful when a function has many parameters or default values."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="NamedArguments.kt"',title:'"NamedArguments.kt"'},'fun personInfo(name: String, age: Int, city: String) {\n    println("$name is $age years old and lives in $city.")\n}\n\nfun main() {\n    personInfo(age = 30, city = "New York", name = "John")\n}\n')),(0,r.kt)("h2",{id:"common-pitfalls-and-best-practices"},"Common Pitfalls and Best Practices"),(0,r.kt)("h3",{id:"overusing-default-arguments"},"Overusing Default Arguments"),(0,r.kt)("p",null,"Overuse of default arguments can make function calls confusing and lead to bugs. If a function has many parameters with default values, it might be better to refactor the function or use a design pattern like Builder."),(0,r.kt)("h3",{id:"single-expression-functions"},"Single Expression Functions"),(0,r.kt)("p",null,"When a function returns a single expression, the curly braces can be omitted and the body is specified after a ",(0,r.kt)("inlineCode",{parentName:"p"},"=")," symbol. It's a good practice to use this concise syntax when possible."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="SingleExpressionFunction.kt"',title:'"SingleExpressionFunction.kt"'},"fun add(a: Int, b: Int) = a + b\n")),(0,r.kt)("h3",{id:"documenting-functions"},"Documenting Functions"),(0,r.kt)("p",null,"It's a good practice to document your functions, especially if they are part of a public API. Kotlin uses KDoc notation, similar to Java's JavaDoc."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="FunctionDocumentation.kt"',title:'"FunctionDocumentation.kt"'},"/**\n * Adds two integers together.\n * @param a The first integer.\n * @param b The second integer.\n * @return The sum of a and b.\n */\nfun add(a: Int, b: Int) = a + b\n")),(0,r.kt)("h2",{id:"design-patterns"},"Design Patterns"),(0,r.kt)("p",null,"In the context of design patterns, functions in Kotlin can be used in a variety of ways. Here are a few examples:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"In the Strategy pattern, different strategies can be implemented as functions and passed around."),(0,r.kt)("li",{parentName:"ul"},"In the Observer pattern, callback functions can be used to notify observers."),(0,r.kt)("li",{parentName:"ul"},"In the Factory pattern, factory functions can be used to create objects.")),(0,r.kt)("p",null,"Functions are a fundamental part of Kotlin and understanding how to use them effectively is crucial to becoming a proficient Kotlin developer."),(0,r.kt)(i.Z,{mdxType:"DocCardList"}))}p.isMDXComponent=!0}}]);