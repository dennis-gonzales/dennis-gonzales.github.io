"use strict";(self.webpackChunkmy_learning_paths=self.webpackChunkmy_learning_paths||[]).push([[3418],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>y});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(a),d=r,y=u["".concat(l,".").concat(d)]||u[d]||m[d]||i;return a?n.createElement(y,s(s({ref:t},c),{},{components:a})):n.createElement(y,s({ref:t},c))}));function y(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,s=new Array(i);s[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:r,s[1]=o;for(var p=2;p<i;p++)s[p]=a[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},2991:(e,t,a)=>{a.d(t,{Z:()=>g});var n=a(7294),r=a(6010),i=a(2802),s=a(9960),o=a(3919),l=a(5999);const p={cardContainer:"cardContainer_fWXF",cardTitle:"cardTitle_rnsV",cardDescription:"cardDescription_PWke"};function c(e){let{href:t,children:a}=e;return n.createElement(s.Z,{href:t,className:(0,r.Z)("card padding--lg",p.cardContainer)},a)}function u(e){let{href:t,icon:a,title:i,description:s}=e;return n.createElement(c,{href:t},n.createElement("h2",{className:(0,r.Z)("text--truncate",p.cardTitle),title:i},a," ",i),s&&n.createElement("p",{className:(0,r.Z)("text--truncate",p.cardDescription),title:s},s))}function m(e){let{item:t}=e;const a=(0,i.Wl)(t);return a?n.createElement(u,{href:a,icon:"\ud83d\uddc3\ufe0f",title:t.label,description:t.description??(0,l.I)({message:"{count} items",id:"theme.docs.DocCard.categoryDescription",description:"The default description for a category card in the generated index about how many items this category includes"},{count:t.items.length})}):null}function d(e){let{item:t}=e;const a=(0,o.Z)(t.href)?"\ud83d\udcc4\ufe0f":"\ud83d\udd17",r=(0,i.xz)(t.docId??void 0);return n.createElement(u,{href:t.href,icon:a,title:t.label,description:t.description??r?.description})}function y(e){let{item:t}=e;switch(t.type){case"link":return n.createElement(d,{item:t});case"category":return n.createElement(m,{item:t});default:throw new Error(`unknown item type ${JSON.stringify(t)}`)}}function h(e){let{className:t}=e;const a=(0,i.jA)();return n.createElement(g,{items:a.items,className:t})}function g(e){const{items:t,className:a}=e;if(!t)return n.createElement(h,e);const s=(0,i.MN)(t);return n.createElement("section",{className:(0,r.Z)("row",a)},s.map(((e,t)=>n.createElement("article",{key:t,className:"col col--6 margin-bottom--lg"},n.createElement(y,{item:e})))))}},1861:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var n=a(7462),r=(a(7294),a(3905)),i=a(2991);const s={sidebar_position:2},o="Data Types",l={unversionedId:"programming/languages/python/data-types/index",id:"programming/languages/python/data-types/index",title:"Data Types",description:"Python has several built-in data types, including:",source:"@site/docs/programming/languages/python/data-types/index.mdx",sourceDirName:"programming/languages/python/data-types",slug:"/programming/languages/python/data-types/",permalink:"/programming/languages/python/data-types/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/programming/languages/python/data-types/index.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Variables",permalink:"/programming/languages/python/variables"},next:{title:"Dictionary",permalink:"/programming/languages/python/data-types/dict"}},p={},c=[{value:"Everything is an Object",id:"everything-is-an-object",level:2}],u={toc:c},m="wrapper";function d(e){let{components:t,...a}=e;return(0,r.kt)(m,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"data-types"},"Data Types"),(0,r.kt)("p",null,"Python has several built-in data types, including:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Numeric types:")," These include integer ",(0,r.kt)("a",{parentName:"li",href:"./data-types/int"},"(int)"),", floating point number ",(0,r.kt)("a",{parentName:"li",href:"./data-types/float"},"(float)"),", and complex number ",(0,r.kt)("a",{parentName:"li",href:"./data-types/complex"},"(complex)"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Sequence types:")," These include string ",(0,r.kt)("a",{parentName:"li",href:"./data-types/str"},"(str)"),", ",(0,r.kt)("a",{parentName:"li",href:"./data-types/list"},"list"),", and ",(0,r.kt)("a",{parentName:"li",href:"./data-types/tuple"},"tuple"),". Sequences are ordered collections of items."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Mapping type:")," The dictionary ",(0,r.kt)("a",{parentName:"li",href:"./data-types/dict"},"(dict)")," is a data type used for mappings. Dictionaries store key-value pairs."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Set types:")," Sets ",(0,r.kt)("a",{parentName:"li",href:"./data-types/set"},"(set)")," and frozen sets ",(0,r.kt)("a",{parentName:"li",href:"./data-types/frozenset"},"(frozenset)")," are collections of unique elements. Sets are mutable, and frozen sets are immutable."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Boolean type:")," This ",(0,r.kt)("a",{parentName:"li",href:"./data-types/bool"},"bool")," type includes two values, True and False."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Binary types:")," These include ",(0,r.kt)("a",{parentName:"li",href:"./data-types/bytes"},"bytes"),", ",(0,r.kt)("a",{parentName:"li",href:"./data-types/bytearray"},"bytearray"),", and ",(0,r.kt)("a",{parentName:"li",href:"./data-types/memoryview"},"memoryview"),". They are used for manipulating binary data.")),(0,r.kt)("p",null,"These are just a few examples. Each data type has its own characteristics and behavior."),(0,r.kt)("h2",{id:"everything-is-an-object"},"Everything is an Object"),(0,r.kt)("p",null,"Everything in Python is an object, and that includes data types, classes and functions. The reason for this is rooted in Python's philosophy and design goals."),(0,r.kt)("p",null,'Objects in Python come from a "blueprint" called a class, which defines their data and behaviors. Even built-in data types like integers, floats, and strings come from classes like ',(0,r.kt)("inlineCode",{parentName:"p"},"int"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"float"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"str")," respectively. These classes provide methods that you can use on instances of the class."),(0,r.kt)("p",null,"For example, when you create an integer in Python:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"x = 7\n")),(0,r.kt)("p",null,"What you're actually doing is creating an instance of the ",(0,r.kt)("inlineCode",{parentName:"p"},"int")," class:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"x = int(7)\n")),(0,r.kt)("p",null,"Once ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," is an instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"int"),", it has access to ",(0,r.kt)("inlineCode",{parentName:"p"},"int")," methods, like ",(0,r.kt)("inlineCode",{parentName:"p"},"bit_length()"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"print(x.bit_length())  # Outputs: 3\n")),(0,r.kt)("p",null,"The same goes for other data types. When you create a string:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'s = "hello"\n')),(0,r.kt)("p",null,"You're actually creating an instance of the ",(0,r.kt)("inlineCode",{parentName:"p"},"str")," class, which gives s access to ",(0,r.kt)("inlineCode",{parentName:"p"},"str")," methods, like ",(0,r.kt)("inlineCode",{parentName:"p"},"upper()"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'print(s.upper())  # Outputs: "HELLO"\n')),(0,r.kt)("p",null,"So in Python, everything - data types, functions, classes, etc. - is created from a class, which makes everything an object. This consistency is one of the reasons why Python is so user-friendly and versatile. It allows you to use the same set of rules (the rules of objects) for almost everything you do in the language."),(0,r.kt)(i.Z,{mdxType:"DocCardList"}))}d.isMDXComponent=!0}}]);