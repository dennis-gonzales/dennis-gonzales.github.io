"use strict";(self.webpackChunkmy_learning_paths=self.webpackChunkmy_learning_paths||[]).push([[1948],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>b});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=c(a),d=i,b=m["".concat(s,".").concat(d)]||m[d]||p[d]||l;return a?n.createElement(b,r(r({ref:t},u),{},{components:a})):n.createElement(b,r({ref:t},u))}));function b(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=a.length,r=new Array(l);r[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[m]="string"==typeof e?e:i,r[1]=o;for(var c=2;c<l;c++)r[c]=a[c];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},2991:(e,t,a)=>{a.d(t,{Z:()=>v});var n=a(7294),i=a(6010),l=a(2802),r=a(9960),o=a(3919),s=a(5999);const c={cardContainer:"cardContainer_fWXF",cardTitle:"cardTitle_rnsV",cardDescription:"cardDescription_PWke"};function u(e){let{href:t,children:a}=e;return n.createElement(r.Z,{href:t,className:(0,i.Z)("card padding--lg",c.cardContainer)},a)}function m(e){let{href:t,icon:a,title:l,description:r}=e;return n.createElement(u,{href:t},n.createElement("h2",{className:(0,i.Z)("text--truncate",c.cardTitle),title:l},a," ",l),r&&n.createElement("p",{className:(0,i.Z)("text--truncate",c.cardDescription),title:r},r))}function p(e){let{item:t}=e;const a=(0,l.Wl)(t);return a?n.createElement(m,{href:a,icon:"\ud83d\uddc3\ufe0f",title:t.label,description:t.description??(0,s.I)({message:"{count} items",id:"theme.docs.DocCard.categoryDescription",description:"The default description for a category card in the generated index about how many items this category includes"},{count:t.items.length})}):null}function d(e){let{item:t}=e;const a=(0,o.Z)(t.href)?"\ud83d\udcc4\ufe0f":"\ud83d\udd17",i=(0,l.xz)(t.docId??void 0);return n.createElement(m,{href:t.href,icon:a,title:t.label,description:t.description??i?.description})}function b(e){let{item:t}=e;switch(t.type){case"link":return n.createElement(d,{item:t});case"category":return n.createElement(p,{item:t});default:throw new Error(`unknown item type ${JSON.stringify(t)}`)}}function g(e){let{className:t}=e;const a=(0,l.jA)();return n.createElement(v,{items:a.items,className:t})}function v(e){const{items:t,className:a}=e;if(!t)return n.createElement(g,e);const r=(0,l.MN)(t);return n.createElement("section",{className:(0,i.Z)("row",a)},r.map(((e,t)=>n.createElement("article",{key:t,className:"col col--6 margin-bottom--lg"},n.createElement(b,{item:e})))))}},8595:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>u});var n=a(7462),i=(a(7294),a(3905)),l=a(2991);const r={sidebar_position:1},o="Variables",s={unversionedId:"programming/languages/kotlin/variables/index",id:"programming/languages/kotlin/variables/index",title:"Variables",description:"Variables in Kotlin are used to store data for processing. Kotlin provides two types of variables: mutable (which can be reassigned) and immutable (which cannot be reassigned once initialized).",source:"@site/docs/programming/languages/kotlin/variables/index.mdx",sourceDirName:"programming/languages/kotlin/variables",slug:"/programming/languages/kotlin/variables/",permalink:"/programming/languages/kotlin/variables/",draft:!1,editUrl:"https://github.com/dennis-gonzales/dennis-gonzales.github.io/blob/main/docs/programming/languages/kotlin/variables/index.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Kotlin",permalink:"/programming/languages/kotlin/"},next:{title:"Deep Dive",permalink:"/programming/languages/kotlin/variables/deep-dive"}},c={},u=[{value:"Mutable Variables",id:"mutable-variables",level:2},{value:"Immutable Variables",id:"immutable-variables",level:2},{value:"Variable Types",id:"variable-types",level:2},{value:"Late Initialization",id:"late-initialization",level:2},{value:"Common Pitfalls and Best Practices",id:"common-pitfalls-and-best-practices",level:2},{value:"Null Safety",id:"null-safety",level:3},{value:"Accessing Uninitialized <code>lateinit</code>",id:"accessing-uninitialized-lateinit",level:3},{value:"Immutable Over Mutable",id:"immutable-over-mutable",level:3},{value:"Design Patterns",id:"design-patterns",level:2}],m={toc:u},p="wrapper";function d(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"variables"},"Variables"),(0,i.kt)("p",null,"Variables in Kotlin are used to store data for processing. Kotlin provides two types of variables: mutable (which can be reassigned) and immutable (which cannot be reassigned once initialized)."),(0,i.kt)("h2",{id:"mutable-variables"},"Mutable Variables"),(0,i.kt)("p",null,"Mutable variables are declared using the ",(0,i.kt)("inlineCode",{parentName:"p"},"var")," keyword. You can change the value of a mutable variable after it's been assigned."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="MutableVariable.kt"',title:'"MutableVariable.kt"'},"fun main() {\n    var age = 30 // Initializing a mutable variable\n    println(age) // Prints: 30\n\n    age = 31 // Changing the value of the variable\n    println(age) // Prints: 31\n}\n")),(0,i.kt)("h2",{id:"immutable-variables"},"Immutable Variables"),(0,i.kt)("p",null,"Immutable variables are declared using the ",(0,i.kt)("inlineCode",{parentName:"p"},"val")," keyword. Once a value is assigned to a ",(0,i.kt)("inlineCode",{parentName:"p"},"val"),", it cannot be reassigned."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="ImmutableVariable.kt"',title:'"ImmutableVariable.kt"'},"fun main() {\n    val age = 30 // Initializing an immutable variable\n    println(age) // Prints: 30\n\n    // This will throw a compiler error\n    // age = 31 // Can't change the value of the variable\n}\n")),(0,i.kt)("h2",{id:"variable-types"},"Variable Types"),(0,i.kt)("p",null,"Kotlin is a statically typed language. This means the type of every variable and expression is known at compile time. The compiler can infer the type of a variable from its initializer expression. However, you can explicitly specify the type if you want."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="VariableTypes.kt"',title:'"VariableTypes.kt"'},'fun main() {\n    val name: String = "John" // Type is explicitly declared\n    val age = 30 // Type is inferred by the compiler\n}\n')),(0,i.kt)("h2",{id:"late-initialization"},"Late Initialization"),(0,i.kt)("p",null,"In Kotlin, non-null type variables must be initialized during declaration. However, if you want to delay the initialization, you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"lateinit")," keyword. It's typically used for dependency injection or initializing a variable in a unit test setup method."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="LateInitialization.kt"',title:'"LateInitialization.kt"'},"class MyTest {\n    lateinit var subject: TestSubject\n\n    @SetUp fun setup() {\n        subject = TestSubject()\n    }\n\n    @Test fun test() {\n        subject.method()  // dereference directly\n    }\n}\n")),(0,i.kt)("p",null,"Please note that the ",(0,i.kt)("inlineCode",{parentName:"p"},"lateinit")," modifier can only be used with ",(0,i.kt)("inlineCode",{parentName:"p"},"var"),", and the variable must be non-null and non-primitive."),(0,i.kt)("h2",{id:"common-pitfalls-and-best-practices"},"Common Pitfalls and Best Practices"),(0,i.kt)("h3",{id:"null-safety"},"Null Safety"),(0,i.kt)("p",null,"A common pitfall is attempting to assign or use a ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," value for non-nullable variables."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="NullSafety.kt"',title:'"NullSafety.kt"'},"fun main() {\n    var name: String = null // This will throw a compiler error\n}\n")),(0,i.kt)("p",null,"To avoid this, make sure you initialize all non-nullable variables or declare them as nullable."),(0,i.kt)("h3",{id:"accessing-uninitialized-lateinit"},"Accessing Uninitialized ",(0,i.kt)("inlineCode",{parentName:"h3"},"lateinit")),(0,i.kt)("p",null,"For ",(0,i.kt)("inlineCode",{parentName:"p"},"lateinit")," variables, a common pitfall is accessing the variable before it's been initialized. This results in a ",(0,i.kt)("inlineCode",{parentName:"p"},"UninitializedPropertyAccessException"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="LateInitializationPitfall.kt"',title:'"LateInitializationPitfall.kt"'},"class MyTest {\n    lateinit var subject: TestSubject\n\n    @Test fun test() {\n        subject.method()  // Throws UninitializedPropertyAccessException\n    }\n}\n")),(0,i.kt)("p",null,"To avoid this, always make sure you've initialized ",(0,i.kt)("inlineCode",{parentName:"p"},"lateinit")," variables before using them."),(0,i.kt)("h3",{id:"immutable-over-mutable"},"Immutable Over Mutable"),(0,i.kt)("p",null,"It's a good practice to prefer using immutable variables (",(0,i.kt)("inlineCode",{parentName:"p"},"val"),") over mutable ones (",(0,i.kt)("inlineCode",{parentName:"p"},"var"),"). This leads to safer and more predictable code."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="ImmutableOverMutable.kt"',title:'"ImmutableOverMutable.kt"'},"fun main() {\n    val age = 30 // Prefer this\n    var mutableAge = 30 // Avoid this if not necessary\n}\n")),(0,i.kt)("h2",{id:"design-patterns"},"Design Patterns"),(0,i.kt)("p",null,"In the context of design patterns, variables play a role in many of them, but not explicitly. For instance, in the Singleton pattern, the instance is usually stored in a ",(0,i.kt)("inlineCode",{parentName:"p"},"var")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"val"),". In the Observer pattern, the state to observe could be a ",(0,i.kt)("inlineCode",{parentName:"p"},"var"),". But in these cases, it's not the variable itself that is important, but the pattern as a whole."),(0,i.kt)(l.Z,{mdxType:"DocCardList"}))}d.isMDXComponent=!0}}]);