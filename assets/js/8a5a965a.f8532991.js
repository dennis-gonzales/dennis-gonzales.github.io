"use strict";(self.webpackChunkmy_learning_paths=self.webpackChunkmy_learning_paths||[]).push([[384],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>h});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(a),u=r,h=d["".concat(s,".").concat(u)]||d[u]||m[u]||i;return a?n.createElement(h,l(l({ref:t},p),{},{components:a})):n.createElement(h,l({ref:t},p))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:r,l[1]=o;for(var c=2;c<i;c++)l[c]=a[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},2991:(e,t,a)=>{a.d(t,{Z:()=>b});var n=a(7294),r=a(6010),i=a(2802),l=a(9960),o=a(3919),s=a(5999);const c={cardContainer:"cardContainer_fWXF",cardTitle:"cardTitle_rnsV",cardDescription:"cardDescription_PWke"};function p(e){let{href:t,children:a}=e;return n.createElement(l.Z,{href:t,className:(0,r.Z)("card padding--lg",c.cardContainer)},a)}function d(e){let{href:t,icon:a,title:i,description:l}=e;return n.createElement(p,{href:t},n.createElement("h2",{className:(0,r.Z)("text--truncate",c.cardTitle),title:i},a," ",i),l&&n.createElement("p",{className:(0,r.Z)("text--truncate",c.cardDescription),title:l},l))}function m(e){let{item:t}=e;const a=(0,i.Wl)(t);return a?n.createElement(d,{href:a,icon:"\ud83d\uddc3\ufe0f",title:t.label,description:t.description??(0,s.I)({message:"{count} items",id:"theme.docs.DocCard.categoryDescription",description:"The default description for a category card in the generated index about how many items this category includes"},{count:t.items.length})}):null}function u(e){let{item:t}=e;const a=(0,o.Z)(t.href)?"\ud83d\udcc4\ufe0f":"\ud83d\udd17",r=(0,i.xz)(t.docId??void 0);return n.createElement(d,{href:t.href,icon:a,title:t.label,description:t.description??r?.description})}function h(e){let{item:t}=e;switch(t.type){case"link":return n.createElement(u,{item:t});case"category":return n.createElement(m,{item:t});default:throw new Error(`unknown item type ${JSON.stringify(t)}`)}}function g(e){let{className:t}=e;const a=(0,i.jA)();return n.createElement(b,{items:a.items,className:t})}function b(e){const{items:t,className:a}=e;if(!t)return n.createElement(g,e);const l=(0,i.MN)(t);return n.createElement("section",{className:(0,r.Z)("row",a)},l.map(((e,t)=>n.createElement("article",{key:t,className:"col col--6 margin-bottom--lg"},n.createElement(h,{item:e})))))}},8936:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var n=a(7462),r=(a(7294),a(3905)),i=a(2991);const l={sidebar_position:1},o="Variables",s={unversionedId:"programming/languages/typescript/variables/index",id:"programming/languages/typescript/variables/index",title:"Variables",description:"Variables in TypeScript are containers that hold reusable data. The value contained in a variable can be changed, and each variable must be declared with a specific data type.",source:"@site/docs/programming/languages/typescript/variables/index.mdx",sourceDirName:"programming/languages/typescript/variables",slug:"/programming/languages/typescript/variables/",permalink:"/programming/languages/typescript/variables/",draft:!1,editUrl:"https://github.com/dennis-gonzales/dennis-gonzales.github.io/blob/main/docs/programming/languages/typescript/variables/index.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"TypeScript",permalink:"/programming/languages/typescript/"},next:{title:"Deep Dive",permalink:"/programming/languages/typescript/variables/deep-dive"}},c={},p=[{value:"Variable Declaration",id:"variable-declaration",level:2},{value:"Variable Types",id:"variable-types",level:2},{value:"Common Pitfalls",id:"common-pitfalls",level:2},{value:"<code>var</code> Hoisting",id:"var-hoisting",level:3},{value:"Not Using <code>const</code> for Immutable Values",id:"not-using-const-for-immutable-values",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Prefer <code>let</code> and <code>const</code> Over <code>var</code>",id:"prefer-let-and-const-over-var",level:3},{value:"Use <code>const</code> for Constants",id:"use-const-for-constants",level:3},{value:"Use Descriptive Variable Names",id:"use-descriptive-variable-names",level:3}],d={toc:p},m="wrapper";function u(e){let{components:t,...a}=e;return(0,r.kt)(m,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"variables"},"Variables"),(0,r.kt)("p",null,"Variables in TypeScript are containers that hold reusable data. The value contained in a variable can be changed, and each variable must be declared with a specific data type."),(0,r.kt)("h2",{id:"variable-declaration"},"Variable Declaration"),(0,r.kt)("p",null,"In TypeScript, you can declare a variable in three ways: ",(0,r.kt)("inlineCode",{parentName:"p"},"var"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"let"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"const"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="VariableDeclaration.ts"',title:'"VariableDeclaration.ts"'},'var varVariable = "This is a var variable";\nlet letVariable = "This is a let variable";\nconst constVariable = "This is a const variable";\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"var"),": The ",(0,r.kt)("inlineCode",{parentName:"p"},"var")," keyword was the standard way to declare a variable before ES6. Variables declared with ",(0,r.kt)("inlineCode",{parentName:"p"},"var")," are function scoped, which means they exist within the function where they were declared.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"let"),": The ",(0,r.kt)("inlineCode",{parentName:"p"},"let")," keyword is block scoped, meaning it exists only within the nearest set of curly brackets ",(0,r.kt)("inlineCode",{parentName:"p"},"{}")," (which is a block).")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"const"),": The ",(0,r.kt)("inlineCode",{parentName:"p"},"const")," keyword, like ",(0,r.kt)("inlineCode",{parentName:"p"},"let"),", is block scoped but is read-only, meaning that once you assign a value to it, you cannot change it later."))),(0,r.kt)("h2",{id:"variable-types"},"Variable Types"),(0,r.kt)("p",null,"When declaring a variable, you can assign a specific type to it. This is the fundamental aspect of TypeScript. Here's how to declare variables of different types:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="VariableTypes.ts"',title:'"VariableTypes.ts"'},'let isDone: boolean = false;\nlet decimal: number = 6;\nlet hex: number = 0xf00d;\nlet color: string = "blue";\n')),(0,r.kt)("h2",{id:"common-pitfalls"},"Common Pitfalls"),(0,r.kt)("h3",{id:"var-hoisting"},(0,r.kt)("inlineCode",{parentName:"h3"},"var")," Hoisting"),(0,r.kt)("p",null,"Variables declared with ",(0,r.kt)("inlineCode",{parentName:"p"},"var")," are subject to hoisting, which means they are moved to the top of their scope. This can lead to unexpected results if a variable is accessed before it's declared."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="VarHoisting.ts"',title:'"VarHoisting.ts"'},"console.log(x); // undefined\nvar x = 5;\n")),(0,r.kt)("p",null,"When interpreted by the JavaScript engine:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="VarHoisting.ts"',title:'"VarHoisting.ts"'},"// highlight-next-line\nvar x;\nconsole.log(x); // undefined\nx = 5;\n")),(0,r.kt)("p",null,"Because the variable x is declared but not yet initialized when the console.log(x) statement is executed, the output is undefined."),(0,r.kt)("h3",{id:"not-using-const-for-immutable-values"},"Not Using ",(0,r.kt)("inlineCode",{parentName:"h3"},"const")," for Immutable Values"),(0,r.kt)("p",null,"When you declare a variable that won't change, you should use ",(0,r.kt)("inlineCode",{parentName:"p"},"const")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"let")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"var"),". This gives TypeScript and your fellow developers more information about the variable, and can help prevent bugs."),(0,r.kt)("h2",{id:"best-practices"},"Best Practices"),(0,r.kt)("h3",{id:"prefer-let-and-const-over-var"},"Prefer ",(0,r.kt)("inlineCode",{parentName:"h3"},"let")," and ",(0,r.kt)("inlineCode",{parentName:"h3"},"const")," Over ",(0,r.kt)("inlineCode",{parentName:"h3"},"var")),(0,r.kt)("p",null,"It's generally best to use ",(0,r.kt)("inlineCode",{parentName:"p"},"let")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"const")," to declare variables, rather than ",(0,r.kt)("inlineCode",{parentName:"p"},"var"),". ",(0,r.kt)("inlineCode",{parentName:"p"},"let")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"const")," have block scope rather than function scope, which makes it easier to reason about where a variable is available."),(0,r.kt)("h3",{id:"use-const-for-constants"},"Use ",(0,r.kt)("inlineCode",{parentName:"h3"},"const")," for Constants"),(0,r.kt)("p",null,"When a variable's value should not change, declare it with ",(0,r.kt)("inlineCode",{parentName:"p"},"const"),". This makes the code more self-documenting and helps prevent bugs."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="ConstExample.ts"',title:'"ConstExample.ts"'},"const pi = 3.14159;\n")),(0,r.kt)("h3",{id:"use-descriptive-variable-names"},"Use Descriptive Variable Names"),(0,r.kt)("p",null,"Choose variable names that describe the data they contain. This makes your code easier to read and understand."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="DescriptiveNameExample.ts"',title:'"DescriptiveNameExample.ts"'},"let userAge = 21;  // Good\nlet x = 21;  // Bad\n")),(0,r.kt)(i.Z,{mdxType:"DocCardList"}))}u.isMDXComponent=!0}}]);